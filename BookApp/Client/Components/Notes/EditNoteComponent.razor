@using Blazored.Modal
@using BookApp.Client.Services
@using BookApp.Client.Services.Interfaces.Notes
@using BookApp.Shared.Models.ClientModels
@using BookApp.Shared.Models.ClientModels.Notes

<BookApp.Client.Components.ErrorHandler.ErrorHandlerComponent ChildComponentName="Edit analysis">
    <ChildContent>
        <EditForm Model="@currentNote" OnValidSubmit="@EditNote" class="form">
            <DataAnnotationsValidator />
            <ValidationSummary class="validation-summary" />

            <div class="form-group">
                <label for="AnalysisTitle">Note content:</label>
                <InputText @bind-Value="currentNote!.Content" class="form-control" />
            </div>

            @if (awaitingResponse)
            {
                <p>Editing note...</p>
            }
            else
            {
                <button type="submit" class="btn btn-primary">Submit</button>
            }
        </EditForm>
    </ChildContent>
</BookApp.Client.Components.ErrorHandler.ErrorHandlerComponent>

<button @onclick="Close">Close</button>

@code {
    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; } = default!;

    [Parameter]
    public NoteModel Note { get; set; }

    [Parameter]
    public INoteClientService<INoteModel> _noteClientService { get; set; }

    private bool awaitingResponse = false;

    private NoteModel currentNote { get; set; } = new();

    private async Task Close() => await BlazoredModal.CloseAsync();

    public async Task EditNote()
    {
        awaitingResponse = true;

        var response = await _noteClientService.EditNote(currentNote);
        var editedNote = await HelperService.HandleResponse<NoteModel>(response);
        Note = editedNote;

        await Close();
    }

    protected override void OnInitialized()
    {
        currentNote = Note;
    }
}
