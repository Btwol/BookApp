@using BookApp.Client.Delegates
@inject IModalService Modal
@inject IAppStorage appStorage

<style>
    .note-holder {
        width: 100%;
        height: fit-content;
        /*max-height: 50%;*/
        resize:none;
        /*height:100px;*/
        padding: 5px;
        margin: 0 auto;
        background-color: #FFFFE0;
        color: #000;
        border: 1px solid #000;
        border-radius: 5px;
        overflow-y: auto;
/*        overflow-x: clip;
        word-wrap: break-word;*/
    }
</style>

<div style="border-width:2px; border-style: solid; border-color: black;">
    @if (userCanEdit && enableAddingNewNotes)
    {
        <EditForm Model="@newNote" OnValidSubmit="@AddNote" class="form">
            <DataAnnotationsValidator />
            <ValidationSummary class="validation-summary" />
            <div style="display:flex">
                <InputText style="flex:auto" @bind-Value="newNote!.Content" class="form-control" />
                <button style="flex:0.2; max-width:fit-content;" type="submit" class="button-action">Add Note</button>
            </div>
        </EditForm>
    }
    <hr style="margin:3px; border:2px solid white;" />
    @foreach (NoteModel note in Notes)
    {
        <div style="margin:2px;">
        @if (userCanEdit)
        {
            <div style="display:flex; flex-direction:row">
            <textarea style="margin:0px; flex:auto" class="note-holder" @oninput="(ChangeEventArgs e) => EditNote(note, e)">@note.Content</textarea>
            <div style="display:flex; flex-direction:column; flex:auto">
            <button style="flex:0.5; max-width:fit-content" class="button-action" @onclick="() => DeleteAnalysisNote(note.Id)">Delete</button>
                        <button style="flex:0.5; max-width:inherit" class="button-action" @onclick="() => ShowManageTagsModal(note)">Tags</button>
                </div>
                </div>
        }
        else
        {
            <div class="note-holder">@note.Content</div>
        }
        
        </div>
        <hr style="margin:3px; border:2px solid white;" />
    }
</div>

@code {
    [Parameter]
    public IEnumerable<INoteClientModel> Notes { get; set; }
    [Parameter]
    public int bookAnalysisId { get; set; }
    [Parameter]
    public List<TagModel> Tags { get; set; }
    [Parameter]
    public INoteClientModel newNote { get; set; }
    [Parameter]
    public INoteClientService _noteClientService { get; set; }
    [Parameter]
    public CreateNoteDelegate createNoteDelegate { get; set; }
    [Parameter]
    public bool enableAddingNewNotes { get; set; }


    private bool userCanEdit = false;

    private async Task EditNote(INoteClientModel note, ChangeEventArgs e)
    {
        var newContent = e.Value.ToString();
        if (!string.IsNullOrEmpty(newContent) && !string.IsNullOrWhiteSpace(newContent))
        {
            note.Content = newContent;
            await _noteClientService.EditNote(note);
        }
        else
        {
            StateHasChanged();
        }
    }

    public async Task AddNote()
    {
        newNote = createNoteDelegate(newNote);
        if(newNote != null)
        {
            await _noteClientService.AddNote(newNote);
        }
    }

    private async Task ShowManageTagsModal(INoteClientModel note)
    {
        var parameters = new ModalParameters()
        .Add(nameof(ManageTagsComponent.bookAnalysisId), bookAnalysisId)
        .Add(nameof(ManageTagsComponent.Tags), Tags)
        .Add(nameof(ManageTagsComponent.taggedItem), note)
        .Add(nameof(ManageTagsComponent.tagManagerClientService), _noteClientService);

        var modal = Modal.Show<ManageTagsComponent>("Manage Note Tags", parameters);
        await modal.Result;
    }

    private async Task DeleteAnalysisNote(int noteId)
    {
        await _noteClientService.DeleteNote(noteId, bookAnalysisId);
    }

    protected async override Task OnInitializedAsync()
    {
        userCanEdit = await appStorage.UserHasStoredAnalysisEditorialRights();
    }
}
