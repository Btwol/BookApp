@inject IModalService Modal
@inject IAnalysisNoteClientService _analysisNoteClientService
@inject IAppStorage appStorage

<div style="border-width:2px; border-style: solid; border-color: black;">
<p>Analysis Notes:</p>
@if (userCanEdit)
{
    <button class="button-action" @onclick="ShowAddAnalysisNoteModal">Add Analysis Note</button>
}

@foreach (AnalysisNoteModel note in AnalysisNotes)
{
    <div class="note-holder">
        <p>@note.Content</p>
    </div>
    @if (userCanEdit)
    {
        <button class="button-action" @onclick="() => ShowEditAnalysisNoteModal(note)">Edit</button>
        <button class="button-action" @onclick="() => DeleteAnalysisNote(note.Id)">Delete</button>
    }
    <button class="button-action" @onclick="() => ShowManageTagsModal(note)">Tags</button>
}
</div>

@code {
    [Parameter]
    public List<AnalysisNoteModel> AnalysisNotes { get; set; }
    [Parameter]
    public EventCallback<List<AnalysisNoteModel>> AnalysisNotesChanged { get; set; }
    [Parameter]
    public int bookAnalysisId { get; set; }
    [Parameter]
    public List<TagModel> Tags { get; set; }

    private bool userCanEdit = false;


    private async Task ShowAddAnalysisNoteModal()
    {
        var parameters = new ModalParameters()
            .Add(nameof(AddAnalysisNoteComponent.AnalysisNotes), AnalysisNotes)
            .Add(nameof(AddAnalysisNoteComponent.bookAnalysisId), bookAnalysisId);

        var modal = Modal.Show<AddAnalysisNoteComponent>("Add Analysis Note", parameters);
        await modal.Result;
    }

    private async Task ShowEditAnalysisNoteModal(AnalysisNoteModel note)
    {
        var parameters = new ModalParameters().Add(nameof(EditAnalysisNoteComponent.AnalysisNote), note);
        var modal = Modal.Show<EditAnalysisNoteComponent>("Edit Analysis Note", parameters);
        await modal.Result;
    }

    private async Task ShowManageTagsModal(AnalysisNoteModel note)
    {
        var parameters = new ModalParameters()
        .Add(nameof(ManageTagsComponent.bookAnalysisId), bookAnalysisId)
        .Add(nameof(ManageTagsComponent.Tags), Tags)
        .Add(nameof(ManageTagsComponent.taggedItem), note)
        .Add(nameof(ManageTagsComponent.tagManagerClientService), _analysisNoteClientService);

        var modal = Modal.Show<ManageTagsComponent>("Manage Analysis Note Tags", parameters);
        await modal.Result;
    }

    private async Task DeleteAnalysisNote(int noteId)
    {
        await _analysisNoteClientService.DeleteNote(noteId, bookAnalysisId);
    }

    protected async override Task OnInitializedAsync()
    {
        userCanEdit = await appStorage.UserHasStoredAnalysisEditorialRights();
    }
}
