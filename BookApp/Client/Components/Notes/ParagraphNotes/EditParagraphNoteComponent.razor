@inject IParagraphNoteClientService _paragraphNoteClientService

<BookApp.Client.Components.ErrorHandler.ErrorHandlerComponent ChildComponentName="Edit paragraph">
    <ChildContent>
        <EditForm Model="@currentParagraphNote" OnValidSubmit="@EditNote" class="form">
            <DataAnnotationsValidator />
            <ValidationSummary class="validation-summary" />

            <div class="form-group">
                <label for="ParagraphTitle">Note content:</label>
                <InputText @bind-Value="currentParagraphNote!.Content" class="form-control" />
            </div>

            @if (awaitingResponse)
            {
                <p>Editing note...</p>
            }
            else
            {
                <button type="submit" class="button-action">Submit</button>
            }
        </EditForm>
    </ChildContent>
</BookApp.Client.Components.ErrorHandler.ErrorHandlerComponent>

<button @onclick="Close">Close</button>

@code {
    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; } = default!;

    [Parameter]
    public ParagraphNoteModel ParagraphNote { get; set; }

    private bool awaitingResponse = false;

    private ParagraphNoteModel currentParagraphNote { get; set; } = new();

    private async Task Close() => await BlazoredModal.CloseAsync();

    public async Task EditNote()
    {
        awaitingResponse = true;

        await _paragraphNoteClientService.EditNote(currentParagraphNote);

        await Close();
    }

    protected override void OnInitialized()
    {
        currentParagraphNote = ParagraphNote;
    }
}
