@using BookApp.Client.Delegates
@inject IAnalysisNoteClientService analysisNoteService
@inject IParagraphNoteClientService paragraphNoteService
@inject IChapterNoteClientService chapterNoteService
@inject IHighlightNoteClientService highlightNoteService

<style>
    .vertical-bar-002,
    .vertical-bar {
        height: 80%;
        background-color: #555555;
        color: #fff;
        overflow-y: auto;
        position: fixed;
        top:40px;
        width:20%;
    }

    .vertical-bar {
        right: 0%;
        max-width: 20%;
    }

    .vertical-bar-002 {
        left: 0%;
        
        max-width: 20%;
    }

            .notes-component-container {
                width:100%;
        }
</style>

<div id="noteContainer" class="notes-component-container">
    <div class="vertical-bar">
    <ErrorHandlerComponent ChildComponentName="Analysis Notes">
        <ChildContent>
            <NotesListingComponent Notes="AnalysisNotes" bookAnalysisId="bookAnalysisId" Tags="Tags" newNote="new AnalysisNoteModel()" _noteClientService="analysisNoteService"
                                   createNoteDelegate="CreateAnalysisNoteModel" />
        </ChildContent>
    </ErrorHandlerComponent>

    <ErrorHandlerComponent ChildComponentName="Chapter Notes">
        <ChildContent>
            <NotesListingComponent Notes="ChapterNotes.Where(n => n.ChapterNumber == currentCount)" bookAnalysisId="bookAnalysisId" Tags="Tags" newNote="new ChapterNoteModel()" _noteClientService="chapterNoteService"
                                   createNoteDelegate="CreateChapterNoteModel" />
        </ChildContent>
    </ErrorHandlerComponent>
    </div>
    <div class="vertical-bar-002">
    @if(lastClickedTextNodeIndex > 0)
    {
        <ErrorHandlerComponent ChildComponentName="Paragraph Notes">
            <ChildContent>
                <NotesListingComponent Notes="ParagraphNotes.Where(n => n.PageNumber == currentCount && n.TextNodeNumber == lastClickedTextNodeIndex)" bookAnalysisId="bookAnalysisId" Tags="Tags" newNote="new ParagraphNoteModel()" _noteClientService="paragraphNoteService"
                                   createNoteDelegate="CreateParagraphNoteModel" />
            </ChildContent>
        </ErrorHandlerComponent>
    }
    
    <ErrorHandlerComponent ChildComponentName="Highlight Notes">
        <ChildContent>
            <NotesListingComponent Notes="HighlightNotes" bookAnalysisId="bookAnalysisId" Tags="Tags" newNote="new HighlightNoteModel()" _noteClientService="highlightNoteService"
                                   createNoteDelegate="CreateHighlightNoteModel" />
        </ChildContent>
    </ErrorHandlerComponent>
    </div>
</div>

@code {
    [Parameter]
    public IEnumerable<AnalysisNoteModel> AnalysisNotes { get; set; }
    [Parameter]
    public IEnumerable<ChapterNoteModel> ChapterNotes { get; set; }
    [Parameter]
    public IEnumerable<ParagraphNoteModel> ParagraphNotes { get; set; }
    [Parameter]
    public IEnumerable<HighlightNoteModel> HighlightNotes { get; set; }

    [Parameter]
    public List<TagModel> Tags { get; set; }

    [Parameter]
    public int currentHighlightId { get; set; }

    [Parameter]
    public int bookAnalysisId { get; set; }

    [Parameter]
    public int currentCount { get; set; }

    [Parameter]
    public int lastClickedTextNodeIndex { get; set; }

    public INoteClientModel CreateAnalysisNoteModel(INoteClientModel note)
    {
        AnalysisNoteModel newNote = (AnalysisNoteModel)note;
        newNote.BookAnalysisId = bookAnalysisId;
        return newNote;
    }

    public INoteClientModel CreateParagraphNoteModel(INoteClientModel note)
    {
        if (lastClickedTextNodeIndex == -1)
        {
            return null;
        }

        ParagraphNoteModel newNote = (ParagraphNoteModel)note;
        newNote.BookAnalysisId = bookAnalysisId;
        newNote.TextNodeNumber = lastClickedTextNodeIndex;
        newNote.PageNumber = currentCount;
        return newNote;
    }

    public INoteClientModel CreateChapterNoteModel(INoteClientModel note)
    {
        ChapterNoteModel newNote = (ChapterNoteModel)note;
        newNote.BookAnalysisId = bookAnalysisId;
        newNote.ChapterNumber = currentCount;
        return newNote;
    }

    public INoteClientModel CreateHighlightNoteModel(INoteClientModel note)
    {
        HighlightNoteModel newNote = (HighlightNoteModel)note;
        newNote.BookAnalysisId = bookAnalysisId;
        newNote.HighlightId = currentHighlightId;
        return newNote;
    }
}
