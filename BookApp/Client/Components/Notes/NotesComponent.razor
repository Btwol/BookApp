@inject IAnalysisNoteClientService analysisNoteService
@inject IParagraphNoteClientService paragraphNoteService
@inject IChapterNoteClientService chapterNoteService
@inject IHighlightNoteClientService highlightNoteService

<style>
    .vertical-bar-002,
    .vertical-bar {
        background-color: #555555;
        color: #fff;
        overflow-y: auto;
        position: fixed;
        top: 40px;
        width: 20%;
        margin-top: 5px;
    }

    .vertical-bar {
        right: 0%;
        height: 80%;
        max-width: 20%;
    }

    .vertical-bar-002 {
        left: 0%;
        height: 100%;
        max-width: 20%;
    }

    .notes-component-container {
        width: 100%;
    }

    .notes-title {
        font-size: 20px;
        display: inline;
    }
</style>

<div id="noteContainer" class="notes-component-container">
    <div class="vertical-bar">
        <ToggleDisplaySummarySectionComponent @bind-DisplaySectionStyle="displayChapterNotesStyle" SectionName="Chapter Notes" />
        <div style="@displayChapterNotesStyle">
            <ErrorHandlerComponent ChildComponentName="Chapter Notes">
                <ChildContent>
                    <NotesListingComponent Notes="ChapterNotes.Where(n => n.Chapter == currentCount)" BookAnalysis="BookAnalysis"
                                           newNote="new ChapterNoteModel()" NoteClientService="chapterNoteService" createNoteDelegate="CreateChapterNoteModel"
                                           enableAddingNewNotes=true />
                </ChildContent>
            </ErrorHandlerComponent>
        </div>

        <ToggleDisplaySummarySectionComponent @bind-DisplaySectionStyle="displayAnalysisNotesStyle" SectionName="Analysis Notes" EnabledStyle="block" />
        <div style="@displayAnalysisNotesStyle;">
            <ErrorHandlerComponent ChildComponentName="Analysis Notes">
                <ChildContent>
                    <NotesListingComponent Notes="AnalysisNotes" BookAnalysis="BookAnalysis" newNote="new AnalysisNoteModel()"
                                           NoteClientService="analysisNoteService" createNoteDelegate="CreateAnalysisNoteModel" enableAddingNewNotes=true />
                </ChildContent>
            </ErrorHandlerComponent>
        </div>
    </div>

    <div class="vertical-bar-002">
        @if (lastClickedTextNodeIndex > 0)
        {
            <ToggleDisplaySummarySectionComponent @bind-DisplaySectionStyle="displayParagraphNotesStyle" SectionName="Paragraph Notes" />
            <div style="@displayParagraphNotesStyle">
                <ErrorHandlerComponent ChildComponentName="Paragraph Notes">
                    <ChildContent>
                        <NotesListingComponent Notes="ParagraphNotes.Where(n => n.Chapter == currentCount && n.TextNodeNumber == lastClickedTextNodeIndex)"
                                           BookAnalysis="BookAnalysis" newNote="new ParagraphNoteModel()" NoteClientService="paragraphNoteService"
                                           createNoteDelegate="CreateParagraphNoteModel" enableAddingNewNotes=true />
                    </ChildContent>
                </ErrorHandlerComponent>
            </div>
        }

        <ToggleDisplaySummarySectionComponent @bind-DisplaySectionStyle="displayHighlightsStyle" SectionName="Highlight Notes" />
        <div style="@displayHighlightsStyle">
            <ErrorHandlerComponent ChildComponentName="Highlight Notes">
                <ChildContent>
                    <NotesListingComponent Notes="HighlightNotes" BookAnalysis="BookAnalysis" newNote="new HighlightNoteModel()"
                                           NoteClientService="highlightNoteService" createNoteDelegate="CreateHighlightNoteModel" enableAddingNewNotes=true />
                </ChildContent>
            </ErrorHandlerComponent>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public BookAnalysisDetailedModel BookAnalysis { get; set; }
    [Parameter]
    public IEnumerable<AnalysisNoteModel> AnalysisNotes { get; set; }
    [Parameter]
    public IEnumerable<ChapterNoteModel> ChapterNotes { get; set; }
    [Parameter]
    public IEnumerable<ParagraphNoteModel> ParagraphNotes { get; set; }
    [Parameter]
    public IEnumerable<HighlightNoteModel> HighlightNotes { get; set; }
    [Parameter]
    public int currentHighlightId { get; set; }
    [Parameter]
    public int currentCount { get; set; }
    [Parameter]
    public int lastClickedTextNodeIndex { get; set; }

    private string displayAnalysisNotesStyle;
    private string displayChapterNotesStyle;
    private string displayHighlightsStyle;
    private string displayParagraphNotesStyle;

    private INoteClientModel CreateAnalysisNoteModel(INoteClientModel note)
    {
        AnalysisNoteModel newNote = (AnalysisNoteModel)note;
        newNote.BookAnalysisId = BookAnalysis.Id;
        return newNote;
    }

    private INoteClientModel CreateParagraphNoteModel(INoteClientModel note)
    {
        if (lastClickedTextNodeIndex == -1)
        {
            return null;
        }

        ParagraphNoteModel newNote = (ParagraphNoteModel)note;
        newNote.BookAnalysisId = BookAnalysis.Id;
        newNote.TextNodeNumber = lastClickedTextNodeIndex;
        newNote.Chapter = currentCount;
        return newNote;
    }

    private INoteClientModel CreateChapterNoteModel(INoteClientModel note)
    {
        ChapterNoteModel newNote = (ChapterNoteModel)note;
        newNote.BookAnalysisId = BookAnalysis.Id;
        newNote.Chapter = currentCount;
        return newNote;
    }

    private INoteClientModel CreateHighlightNoteModel(INoteClientModel note)
    {
        HighlightNoteModel newNote = (HighlightNoteModel)note;
        newNote.BookAnalysisId = BookAnalysis.Id;
        newNote.HighlightId = currentHighlightId;
        return newNote;
    }
}
