@inject IChapterNoteClientService chapterNoteService
@inject NavigationManager navigation
@inject IModalService Modal
@inject IAppStorage appStorage

<ToggleDisplaySummarySectionComponent @bind-DisplaySectionStyle="displayChapterNotesStyle" SectionName="Chapter Notes" />
<div style="@displayChapterNotesStyle">
    <div style="display:flex; flex-direction:row; -webkit-flex-align:baseline">
        <div style="flex:0.95">
            <ErrorHandlerComponent ChildComponentName="Chapter Note Adding">
                <ChildContent>
                    <AddNoteComponent createNoteDelegate="CreateChapterNoteModel" enableAddingNewNotes="userCanEdit" newNote="new ChapterNoteModel()" NoteClientService="chapterNoteService" userCanEdit="userCanEdit"></AddNoteComponent>
                </ChildContent>
            </ErrorHandlerComponent>
        </div>
        <div stlye="display:flex; flex:auto; flex-direction:column">
            <div style="text-align:center">Enter chapter number</div>
            <input style="flex:0.6 height:inherit; margin:5px; text-align:center" type="text" class="number-input" @bind="chapterToAddTo">
        </div>
    </div>
    <div class="summary-section">
            @foreach (var note in Notes)
            {   
                <div class="summary-section-element" style="flex:0.9">
                <div style="flex:0.1; display:flex; flex-direction:row">
                    <button style="flex:auto; max-width:fit-content" class="button-action" @onclick="async () => await chapterNoteService.DeleteNote(note.Id, BookAnalysis.Id)">Delete</button>
                    <button style="flex:auto; max-width:fit-content" class="button-action" @onclick="() => ShowManageTagsModal(note)">Tags</button>
                    <button style="flex:auto; max-width:fit-content" class="button-action" @onclick="async () => await GoToChapter(note.Chapter)">Chapter-@note.Chapter</button>
                    @*<div style="height:inherit; border:1px solid black; padding:1px; margin:2px; text-align: center; display: flex; align-items: center; justify-content: center; background-color:white">
                        Chapter: @note.Chapter
                    </div>*@
                    <TagsDisplayComponent Tags="note.Tags" />
                </div>
                @*<div>
                    
                </div>*@
                <div style="height:80%; overflow-y:clip">
                    <ErrorHandlerComponent ChildComponentName="Chapter Notes">
                        <ChildContent>
                            <NoteContainerComponent BookAnalysis="BookAnalysis" note="note" NoteClientService="chapterNoteService" userCanEdit="userCanEdit" enableButtons="false"></NoteContainerComponent>
                        </ChildContent>
                    </ErrorHandlerComponent>
                    </div>
                </div>
            }
    </div>
</div>


@code {
    [Parameter]
    public BookAnalysisDetailedModel BookAnalysis { get; set; }
    [Parameter]
    public IEnumerable<ChapterNoteModel> Notes { get; set; }
    [Parameter]
    public bool userCanEdit { get; set; }
    [Parameter]
    public int ChapterCount { get; set; }

    private string displayChapterNotesStyle { get; set; }

    private int chapterToAddTo { get; set; } = 0;

    public INoteClientModel? CreateChapterNoteModel(INoteClientModel note)
    {
        if (chapterToAddTo > ChapterCount || chapterToAddTo < 0)
        {
            return null;
        }

        ChapterNoteModel newNote = (ChapterNoteModel)note;
        newNote.BookAnalysisId = BookAnalysis.Id;
        newNote.Chapter = chapterToAddTo;
        return newNote;
    }

    private async Task ShowManageTagsModal(ChapterNoteModel note)
    {
        var parameters = new ModalParameters()
        .Add(nameof(ManageTagsComponent.bookAnalysisId), BookAnalysis.Id)
        .Add(nameof(ManageTagsComponent.Tags), BookAnalysis.Tags)
        .Add(nameof(ManageTagsComponent.taggedItem), note)
        .Add(nameof(ManageTagsComponent.tagManagerClientService), chapterNoteService);

        var modal = Modal.Show<ManageTagsComponent>("Manage Highlight Tags", parameters);
        await modal.Result;
    }

    public async Task GoToChapter(int chapter)
    {
        await appStorage.SetReaderPosition(new ReaderPosition { Page = chapter });
        navigation.NavigateTo("/reader");
    }

    protected override void OnInitialized()
    {
        Notes.OrderBy(n => n.Chapter);
    }
}
