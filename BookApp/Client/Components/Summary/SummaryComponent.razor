@page "/summary"
@inject IAppStorage appStorage
@inject IJSRuntime jsRuntime
@inject NavigationManager navigation
@inject IHubClientService hubService

<style>
    .summary {
        width: 99%;
        position: sticky;
        margin: 20px;
        margin-left: auto;
        margin-right: auto;
    }

    .summary-section {
        position: sticky;
        display: grid;
        grid-template-columns: 33% 33% 33%;
        grid-gap: 10px;
        height: 100%;
    }

    .summary-section-element {
        width: 100%;
        text-align: justify;
        /*margin:5px;*/
        height: 35vh;
        /*max-height: fit-content;*/
        justify-content: center;
        border: 1px solid black;
        border-radius: 5px;
        padding: 2px;
        background-color: darkgray;
        overflow-y: auto;
    }
</style>

@if (loading)
{
    <h3>Loading...</h3>
}
else
{
    <div style="position:fixed; bottom:0; display:flex; z-index:999; flex-direction:column; width:100%; overflow-x:auto">
        <div style="width:20%; border:1px solid black; border-radius:5px;">
            <input type="text" @onchange="FilterChapters" placeholder="Filter By Chapter...(eg. 1, 3)" class="form-control" />
        </div>
        <div style="display:flex; flex-direction:row">
        <div>
                <input style="width:100%; border:1px solid black; border-radius:5px;" type="text" @oninput="FilterTags" placeholder="Search Tags..." class="form-control" />
            </div>
            <div>
        @foreach (TagModel tag in filteredTags)
        {
            @if (!includedTags.Any(t => t.Id == tag.Id))
            {
                <button class="tag-item" @onclick="() => AddTag(tag.Id)">@tag.Name</button>
            }
            else
            {
                <button class="tag-item" style="background-color:white; color:black" @onclick="() => RemoveTag(tag.Id)">@tag.Name</button>
            }
        }
            </div>
        </div>
    </div>
    <div class="summary">
        <ErrorHandlerComponent ChildComponentName="Highlights Summary">
            <ChildContent><HighlightSummaryComponent BookAnalysis="BookAnalysis" Highlights="GetFilteredByChapter(GetFilteredByTag(BookAnalysis.Highlights, includedTags), includedChapters)"></HighlightSummaryComponent></ChildContent>
        </ErrorHandlerComponent>

        <hr />

        <ErrorHandlerComponent ChildComponentName="Analysis Notes Summary">
            <ChildContent><AnalysisNoteSummaryComponent BookAnalysis="BookAnalysis" Notes="GetFilteredByTag(BookAnalysis.AnalysisNotes, includedTags)" userCanEdit="userCanEdit"></AnalysisNoteSummaryComponent></ChildContent>
        </ErrorHandlerComponent>

        <hr />

        <ErrorHandlerComponent ChildComponentName="Chapter Notes Summary">
            <ChildContent><ChapterNoteSummaryComponent BookAnalysis="BookAnalysis" Notes="GetFilteredByChapter(GetFilteredByTag(BookAnalysis.ChapterNotes, includedTags), includedChapters)" userCanEdit="userCanEdit"></ChapterNoteSummaryComponent></ChildContent>
        </ErrorHandlerComponent>

        <hr />

        <ErrorHandlerComponent ChildComponentName="Paragraph Notes Summary">
            <ChildContent><ParagraphNoteSummaryComponent BookAnalysis="BookAnalysis" Notes="GetFilteredByChapter(GetFilteredByTag(BookAnalysis.ParagraphNotes, includedTags), includedChapters)" userCanEdit="userCanEdit" Paragraphs="GetFilteredParagraphs()"></ParagraphNoteSummaryComponent></ChildContent>
        </ErrorHandlerComponent>

        <hr />

    </div>

    <div style="height:100px; width:100%"></div>
}
<div style="display:none">
    @if (html is not null)
    {
        @for (int i = 0; i < html.Count; i++)
        {
            <div id=@GetTextContainerId(i)>
                @((MarkupString)html[i].TextContent)
            </div>
        }
    }
</div>

@code {
    EpubBook book;
    List<EpubTextFile> html;
    public BookAnalysisDetailedModel BookAnalysis { get; set; }
    private List<TagModel> filteredTags = new();
    private List<TagModel> includedTags = new();
    private List<int> includedChapters = new();
    private List<ParagraphContent> Paragraphs = new();
    private bool loading = true;
    private bool userCanEdit;

    private string tagSearchKeyword = "";

    public static string GetTextContainerId(int i) => $"textContainer_{i}";

    private void FilterChapters(ChangeEventArgs e)
    {
        if (string.IsNullOrEmpty(e.Value.ToString()))
        {
            includedChapters.Clear();
            return;
        }

        List<string> chapters = e.Value.ToString().Replace(" ", "").Split(",").ToList();
        List<int> _includedChapters = new();
        bool parseSuccesfull = true;
        foreach(string chapter in chapters)
        {
            if(int.TryParse(chapter, out int _chapter))
            {
                _includedChapters.Add(_chapter);
            }
            else
            {
                parseSuccesfull = false;
                break;
            }
        }
        if (parseSuccesfull)
        {
            includedChapters = _includedChapters;
        }
    }

    private void FilterTags(ChangeEventArgs e)
    {
        tagSearchKeyword = e.Value.ToString();
        Console.WriteLine("current: " + e.Value);
        filteredTags = string.IsNullOrWhiteSpace(tagSearchKeyword)
            ? BookAnalysis.Tags
            : BookAnalysis.Tags.Where(t => t.Name.Contains(tagSearchKeyword, StringComparison.OrdinalIgnoreCase)).ToList();

        StateHasChanged();
    }

    public static IEnumerable<T> GetFilteredByTag<T>(IEnumerable<T> tagableItems, IEnumerable<TagModel> tags) where T : ITagableItemModel => tagableItems.Where(h => tags.All(t => h.Tags.Any(ht => ht.Id == t.Id)));
    public static IEnumerable<T> GetFilteredByChapter<T>(IEnumerable<T> itemsBoundToChapter, IEnumerable<int> chapters) where T : IBoundToChapter => (chapters.Count() > 0) ? itemsBoundToChapter.Where(h => chapters.Any(c => c == h.Chapter)) : itemsBoundToChapter;

    public async Task AddTag(int tagId)
    {
        if (!includedTags.Any(t => t.Id == tagId))
        {
            includedTags.Add(BookAnalysis.Tags.FirstOrDefault(t => t.Id == tagId));
        }
        StateHasChanged();
    }

    public async Task RemoveTag(int tagId)
    {
        if (includedTags.Any(t => t.Id == tagId))
        {
            includedTags.Remove(BookAnalysis.Tags.FirstOrDefault(t => t.Id == tagId));
        }
        StateHasChanged();
    }

    private IEnumerable<ParagraphContent> GetFilteredParagraphs()
    {
        if(includedChapters.Count > 0)
        {
            return Paragraphs.Where(p => includedChapters.Contains(p.Chapter));
        }
        else
        {
            return Paragraphs;
        }
    }

    public async Task ReRender()
    {
        StateHasChanged();
    }

    protected async override Task OnInitializedAsync()
    {
        BookAnalysis = await appStorage.GetStoredBookAnalysis();
        filteredTags = BookAnalysis.Tags;

        userCanEdit = await appStorage.UserHasStoredAnalysisEditorialRights();

        var loadedBookByteArray = await appStorage.GetStoredBook();
        book = EpubReader.Read(loadedBookByteArray);
        BookAnalysis = await appStorage.GetStoredBookAnalysis();
        if (book is not null)
        {
            html = book.Resources.Html.ToList();
            StateHasChanged();
        }

        await hubService.RegisterReaderHub(this);



        foreach (var paragraphNote in BookAnalysis.ParagraphNotes)
        {
            var newParagraph = new ParagraphContent { Chapter = paragraphNote.Chapter, TextNode = paragraphNote.TextNodeNumber };
            if(!Paragraphs.Any(p => p.Chapter == newParagraph.Chapter && p.TextNode == newParagraph.TextNode))
            {
                Paragraphs.Add(newParagraph);
            }
        }
        foreach(var parahraph in Paragraphs)
        {
            parahraph.Content = await jsRuntime.InvokeAsync<string>("GetHighlightText", GetTextContainerId(parahraph.Chapter),
                parahraph.TextNode, null, null);
        }

        Paragraphs.OrderBy(p => p.Chapter);

        loading = false;
    }
}
