@page "/summary"
@inject IAppStorage appStorage
@inject IJSRuntime jsRuntime
@inject NavigationManager navigation
@inject IHubClientService hubService

<style>
    .summary {
        width: 95%;
        position: sticky;
        margin: 20px;
        margin-left: auto;
        margin-right: auto;
    }

    .summary-section {
        position: sticky;
        display: grid;
        grid-template-columns: 33% 33% 33%;
        grid-gap: 10px;
        height: 100%;
    }

    .summary-section-element {
        width: 100%;
        text-align: justify;
        height: 35vh;
        justify-content: center;
        border: 1px solid black;
        border-radius: 5px;
        padding: 2px;
        background-color: darkgray;
        overflow-y: auto;
    }
</style>

@if (loading)
{
    <h3>Loading...</h3>
}
else
{
    <div style="position:fixed; bottom:0; display:flex; z-index:999; flex-direction:column; width:100%; overflow-x:auto">
        <div style="width:20%; border:1px solid black; border-radius:5px;">
            <input type="text" @onchange="FilterChapters" placeholder="Filter By Chapter...(eg. 1, 3)" class="form-control" />
        </div>

        <ErrorHandlerComponent ChildComponentName="Tag Filtering">
            <ChildContent><TagFilteringComponent @bind-includedTags="includedTags" Tags="BookAnalysis.Tags"/></ChildContent>
        </ErrorHandlerComponent>

    </div>
    <div class="summary">
        <ErrorHandlerComponent ChildComponentName="Analysis Notes Summary">
            <ChildContent><AnalysisNoteSummaryComponent BookAnalysis="BookAnalysis" Notes="GetFilteredByTag(BookAnalysis.AnalysisNotes, includedTags)" 
                userCanEdit="userCanEdit" IncludedTags="includedTags"/></ChildContent>
        </ErrorHandlerComponent>

        <hr />

        <ErrorHandlerComponent ChildComponentName="Chapter Notes Summary">
            <ChildContent><ChapterNoteSummaryComponent BookAnalysis="BookAnalysis" 
                Notes="GetFilteredByChapter(GetFilteredByTag(BookAnalysis.ChapterNotes, includedTags), includedChapters)"
                                         userCanEdit="userCanEdit" ChapterCount="html.Count" IncludedTags="includedTags"/>
            </ChildContent>
        </ErrorHandlerComponent>

        <hr />

        <ErrorHandlerComponent ChildComponentName="Paragraph Notes Summary">
            <ChildContent><ParagraphNoteSummaryComponent BookAnalysis="BookAnalysis" 
                Notes="GetFilteredByChapter(GetFilteredByTag(BookAnalysis.ParagraphNotes, includedTags), includedChapters)" 
                userCanEdit="userCanEdit" Paragraphs="GetFilteredParagraphs()" IncludedTags="includedTags"/></ChildContent>
        </ErrorHandlerComponent>

        <hr />

        <ErrorHandlerComponent ChildComponentName="Highlights Summary">
            <ChildContent><HighlightSummaryComponent BookAnalysis="BookAnalysis"
                                       Highlights="GetFilteredByChapter(GetFilteredByTag(BookAnalysis.Highlights, includedTags), includedChapters)" 
                                       IncludedTags="includedTags"/>
            </ChildContent>
        </ErrorHandlerComponent>

        <hr />
    </div>

    <div style="height:100px; width:100%"></div>
}
<div style="display:none">
    @if (html is not null)
    {
        @for (int i = 0; i < html.Count; i++)
        {
            <div id=@GetTextContainerId(i)>
                @((MarkupString)html[i].TextContent)
            </div>
        }
    }
</div>

@code {
    public BookAnalysisDetailedModel BookAnalysis { get; set; }
    private EpubBook book;
    private List<EpubTextFile> html;
    private List<TagModel> includedTags = new();
    private List<int> includedChapters = new();
    private List<ParagraphContent> Paragraphs = new();
    private bool loading = true;
    private bool userCanEdit;

    public static string GetTextContainerId(int i) => $"textContainer_{i}";

    private void FilterChapters(ChangeEventArgs e)
    {
        if (string.IsNullOrEmpty(e.Value.ToString()))
        {
            includedChapters.Clear();
            return;
        }

        List<string> chapters = e.Value.ToString().Replace(" ", "").Split(",").ToList();
        List<int> _includedChapters = new();
        bool parseSuccesfull = true;
        foreach (string chapter in chapters)
        {
            if (int.TryParse(chapter, out int _chapter))
            {
                _includedChapters.Add(_chapter);
            }
            else
            {
                parseSuccesfull = false;
                break;
            }
        }
        if (parseSuccesfull)
        {
            includedChapters = _includedChapters;
        }
    }

    public static IEnumerable<T> GetFilteredByTag<T>(IEnumerable<T> tagableItems, IEnumerable<TagModel> tags) where T : ITagableItemModel 
        => tagableItems.Where(h => tags.All(t => h.Tags.Any(ht => ht.Id == t.Id)));

    public static IEnumerable<T> GetFilteredByChapter<T>(IEnumerable<T> itemsBoundToChapter, IEnumerable<int> chapters) where T : IBoundToChapter 
        => (chapters.Count() > 0) ? itemsBoundToChapter.Where(h => chapters.Any(c => c == h.Chapter)) : itemsBoundToChapter;

    private IEnumerable<ParagraphContent> GetFilteredParagraphs()
    {
        var filteredParagraphs = Paragraphs;
        if (includedChapters.Count > 0)
        {
            filteredParagraphs = filteredParagraphs.Where(p => includedChapters.Contains(p.Chapter)).ToList();
        }
        if (includedTags.Count() > 0)
        {
            List<KeyValuePair<int, int>> filteredChapterParagraphPairs = GetFilteredByTag(BookAnalysis.ParagraphNotes, includedTags)
                .Select(item => new KeyValuePair<int, int>(item.Chapter, item.TextNodeNumber)).Distinct()
                .ToList();
            filteredParagraphs = filteredParagraphs.Where(p => filteredChapterParagraphPairs
                .Any(pc => pc.Key == p.Chapter && pc.Value == p.TextNode)).ToList();
        }
        return filteredParagraphs;
    }

    public async Task ReRender()
    {
        StateHasChanged();
    }

    protected async override Task OnInitializedAsync()
    {
        var loadedBookByteArray = await appStorage.GetStoredBook();
        book = EpubReader.Read(loadedBookByteArray);
        if (book is not null)
        {
            html = book.Resources.Html.ToList();
            StateHasChanged();
        }

        BookAnalysis = await appStorage.GetStoredBookAnalysis();
        userCanEdit = await appStorage.UserHasStoredAnalysisEditorialRights();

        await hubService.RegisterReaderHub(this);

        foreach (var paragraphNote in BookAnalysis.ParagraphNotes)
        {
            var newParagraph = new ParagraphContent { Chapter = paragraphNote.Chapter, TextNode = paragraphNote.TextNodeNumber };
            if (!Paragraphs.Any(p => p.Chapter == newParagraph.Chapter && p.TextNode == newParagraph.TextNode))
            {
                Paragraphs.Add(newParagraph);
            }
        }
        foreach (var parahraph in Paragraphs)
        {
            parahraph.Content = await jsRuntime.InvokeAsync<string>("GetHighlightText", GetTextContainerId(parahraph.Chapter),
                parahraph.TextNode, null, null);
        }

        Paragraphs.OrderBy(p => p.Chapter);

        loading = false;
    }
}
