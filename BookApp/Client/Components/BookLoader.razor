@using BookApp.Client.Services
@using BookApp.Client.Services.Interfaces
@using BookApp.Shared.Models.ClientModels
@using BookApp.Shared.Models.Services
@using EpubSharp
@using System.Security.Cryptography
@using BookApp.Client.Components.ErrorHandler
@using BookApp.Client.Components.BookAnalysis
@using BookApp.Client.Components
@inject IBookAnalysisClientService _bookAnalysisClientService

@if (bookAnalysis is null)
{
    @if (showErrorBox)
    {
        <div class="border p-4 text-danger">
            @errorContent
            <button @onclick="() => showErrorBox = false">X</button>
        </div>
    }

    @if (showLoadingAnalysis)
    {
        <p>Loading analysis...</p>
    }

    @if (loadingFile)
    {
        <p>Loading file...</p>
    }

    <p>Select book...</p>
    <p>
        <label>
            <InputFile OnChange="@LoadFiles" />
        </label>
    </p>

    @if (bookLoaded)
    {
        <button class="button-action" @onclick="() => LoadAnalysesFromServer(loadedBookHash)">Load Analyses From Server</button>

        if (showCreateAnalysisForm)
        {
            <button class="button-action" @onclick="() => showCreateAnalysisForm = false">Hide create new analysis form</button>
            <ErrorHandlerComponent ChildComponentName="Create new analysys">
                <ChildContent><CreateNewAnalysis loadedBookHash="@loadedBookHash" book="book" @bind-foundBookAnalyses="foundBookAnalyses" /></ChildContent>
            </ErrorHandlerComponent>
        }
        else
        {
            <button class="button-action" @onclick="() => showCreateAnalysisForm = true">Create new analysis for this book</button>
        }

        <ErrorHandlerComponent ChildComponentName="Book Analyses Listing">
            <ChildContent><FoundAnalysesListing @bind-selectedBookAnalysis="bookAnalysis" foundBookAnalyses="foundBookAnalyses" /></ChildContent>
        </ErrorHandlerComponent>
        }
    }
else
{
    <ErrorHandlerComponent ChildComponentName="Text Box">
        <ChildContent><TextBox bookAnalysis="bookAnalysis" book="book" /></ChildContent>
    </ErrorHandlerComponent>
}



@code {
    private bool awaitingResponse = false;
    private string bookAnalysisCreationResponseMessage = "";
    private bool bookAnalysisCreationSuccessful = true;
    private bool loadingFile = false;
    private bool bookLoaded = false;
    private bool showLoadingAnalysis = false;
    private bool showErrorBox = false;
    private string errorContent = "";
    private BookAnalysisModel bookAnalysis;
    private EpubBook book;
    private byte[] loadedBookByteArray;
    private string loadedBookHash;
    public List<BookAnalysisModel> foundBookAnalyses { get; set; } = new();

    private bool showCreateAnalysisForm = false;
    private BookAnalysisModel newAnalysis { get; set; } = new();

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        try
        {
            loadingFile = true;
            Stream stream = e.File.OpenReadStream(maxAllowedSize: 51200000);
            loadedBookByteArray = await ReadFully(stream);
            book = EpubReader.Read(loadedBookByteArray);
            await ReadBookHash();
            bookLoaded = true;
            loadingFile = false;
        }
        catch (Exception ex)
        {
            errorContent = "Failiure loading file. " + ex.Message;
            showErrorBox = true;
        }
    }

    private async Task LoadAnalysesFromServer(string loadedBookHash)
    {
        showLoadingAnalysis = true;

        var response = await _bookAnalysisClientService.GetAnalysisByHash(loadedBookHash);
        foundBookAnalyses = await HelperService.HandleResponse<List<BookAnalysisModel>>(response);

        showLoadingAnalysis = false;
    }

    private async Task<byte[]> ReadFully(Stream input)
    {
        byte[] buffer = new byte[32 * 1024];
        using (MemoryStream ms = new MemoryStream())
        {
            int read;
            while ((read = await input.ReadAsync(buffer, 0, buffer.Length)) > 0)
            {
                await ms.WriteAsync(buffer, 0, read);
            }
            return ms.ToArray();
        }
    }

    private async Task ReadBookHash()
    {
        SHA256 sha256 = SHA256.Create();
        byte[] hashValue = sha256.ComputeHash(loadedBookByteArray);
        string hashString = BitConverter.ToString(hashValue).Replace("-", "");
        loadedBookHash = hashString;
    }
}
