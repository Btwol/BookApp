@inject ITagClientService _tagService
@inject IAppStorage appStorage

<input type="text" @onchange="FilterTags" placeholder="Search Tags..." class="form-control" />

<ErrorHandlerComponent ChildComponentName="Manage tags">
    <ChildContent>
        <ManageItemTagsComponent TaggedItem="taggedItem" TagManagerClientService="TagManagerClientService" Tags="filteredTags" userHasEditRights="userHasEditRights" />
    </ChildContent>
</ErrorHandlerComponent>

@if (userHasEditRights)
{
    <hr />

    <p>Create new tag:</p>
    <EditForm Model="@NewTag" OnValidSubmit="@CreateNewTag">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <InputText @bind-Value="NewTag!.Name" />
        <button class="button-action" type="submit">Submit</button>
    </EditForm>

    <hr />

    <p>Edit tag:</p>
    @foreach (var tag in filteredTags)
    {
        <button class="tag-item" style=@buttonToggle @onclick="() => { TagToEdit = new TagModel(tag); showEditTagForm = true; }">@tag.Name</button>
    }
    @if (showEditTagForm)
    {
        <EditForm Model="@TagToEdit" OnValidSubmit="EditTag">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <p>Tag name:</p>
            <InputText @bind-Value="TagToEdit!.Name" />
            <button class="button-action" type="submit">Submit</button>
        </EditForm>
    }

    <hr />

    <p>Delete tag:</p>
    @foreach (var tag in filteredTags)
    {
        <button class="tag-item" style=@buttonToggle @onclick="() => DeleteTag(tag.Id)">@tag.Name</button>
    }
}
<hr />

<button class="button-action" @onclick="Close">Close</button>

@code {
    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; } = default!;

    [Parameter]
    public List<TagModel> Tags { get; set; }

    [Parameter]
    public int bookAnalysisId { get; set; }

    [Parameter]
    public ITagableItemModel taggedItem { get; set; }

    [Parameter]
    public ITagManagerClientService TagManagerClientService { get; set; }

    private TagModel TagToEdit { get; set; }
    private TagModel? NewTag { get; set; } = new();
    private string buttonToggle = "";
    private string disabledButtonStyle = "pointer-events: none; background-color: gray";
    private bool showEditTagForm = false;
    private List<int> tagsToAdd = new();
    private List<int> tagsToRemove = new();
    private int selectedTagId = 0;
    private bool addTag = true;
    private string tagSearchKeyword = "";
    private List<TagModel> filteredTags = new();
    private bool userHasEditRights = false;

    private async Task Close() => await BlazoredModal.CloseAsync();

    async Task CreateNewTag()
    {
        try
        {
            ToggleButtons();
            var newTag = await _tagService.CreateNewTag(NewTag, bookAnalysisId);
            NewTag = new();
        }
        finally
        {
            ToggleButtons();
        }
    }

    async Task EditTag()
    {
        try
        {
            ToggleButtons();
            await _tagService.EditTag(TagToEdit);
            TagToEdit = new();
        }
        finally
        {
            showEditTagForm = false;
            ToggleButtons();
        }
    }

    async Task DeleteTag(int tagId)
    {
        try
        {
            ToggleButtons();
            await _tagService.DeleteTag(tagId);
            Tags.FirstOrDefault(t => t.Id == tagId);
        }
        finally
        {
            ToggleButtons();
        }
    }

    private void FilterTags(ChangeEventArgs e)
    {
        tagSearchKeyword = e.Value.ToString();
        Console.WriteLine("current: " + e.Value);
        filteredTags = string.IsNullOrWhiteSpace(tagSearchKeyword)
            ? Tags
            : Tags.Where(t => t.Name.Contains(tagSearchKeyword, StringComparison.OrdinalIgnoreCase)).ToList();
    }

    protected override void OnInitialized()
    {
        filteredTags = Tags;
    }

    private void ToggleButtons()
    {
        if (buttonToggle == disabledButtonStyle)
        {
            buttonToggle = "";
        }
        else
        {
            buttonToggle = disabledButtonStyle;
        }
    }

    protected async override Task OnInitializedAsync()
    {
        var currentUser = await appStorage.GetStoredUser();
        userHasEditRights = await appStorage.UserHasStoredAnalysisEditorialRights();
    }
}
