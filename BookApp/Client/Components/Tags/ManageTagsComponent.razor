@using Blazored.Modal
@using BookApp.Client.Services
@using BookApp.Client.Services.Interfaces
@using BookApp.Client.Services.Interfaces.Notes
@using BookApp.Shared.Models.ClientModels
@using BookApp.Shared.Models.ClientModels.Notes
@using BookApp.Client.Components.ErrorHandler

<ErrorHandlerComponent ChildComponentName="Manage tags">
    <ChildContent>
        <EditForm Model="@Tags" OnValidSubmit="@Submit" class="form">
        @if (!awaitingResponse)
        {
            <h3>Current Tags:</h3>
            @foreach (TagModel tag in taggedItem.Tags)
            {
                <button class="button-action" @onclick="() => RemoveTag(tag.Id)">@tag.Name</button>
            }

            <hr />

            <h3>Add Tags</h3>
            @foreach (TagModel tag in Tags)
            {
                @if(!taggedItem.Tags.Any(t => t.Id == tag.Id))
                {
                    <button class="button-action" @onclick="() => AddTag(tag.Id)">@tag.Name</button>
                }
            }
        }
        else
        {
            <h3>Awaiting response...</h3>
        }
        </EditForm>
    </ChildContent>
</ErrorHandlerComponent>

<button class="button-action" @onclick="Close">Close</button>

@code {
    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; } = default!;

    [Parameter]
    public List<TagModel> Tags { get; set; }

    [Parameter]
    public ITagableItemModel taggedItem { get; set; }

    [Parameter]
    public ITagManagerClientService tagManagerClientService { get; set; }

    private bool awaitingResponse = false;

    private List<int> tagsToAdd = new();
    private List<int> tagsToRemove = new();
    private int selectedTagId = 0;
    private bool addTag = true;
    private async Task Close() => await BlazoredModal.CloseAsync();

    async Task Submit()
    {
        awaitingResponse = true;
        try
        {
            if(addTag)
            {
                await tagManagerClientService.AddTag(taggedItem.Id, selectedTagId);
                taggedItem.Tags.Add(Tags.FirstOrDefault(t => t.Id == selectedTagId));
            }
            else
            {
                await tagManagerClientService.RemoveTag(taggedItem.Id, selectedTagId);
                taggedItem.Tags.Remove(taggedItem.Tags.FirstOrDefault(t => t.Id == selectedTagId));
            }
        }
        finally
        {
            awaitingResponse = false;
            selectedTagId = 0;
        }
    }

    public async Task AddTag(int tagId)
    {
        selectedTagId = tagId;
        addTag = true;
    }

    public async Task RemoveTag(int tagId)
    {
        selectedTagId = tagId;
        addTag = false;
    }
}
