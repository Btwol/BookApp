@page "/reader"

@inject IBookAnalysisClientService _bookAnalysisClientService
@inject IHighlightClientService _highlightClientService
@inject IJSRuntime jsRuntime
@inject ITagClientService _tagService
@inject IAppStorage bookAnalysisStorage

<style>
    @if (css != null)
    {
        @foreach (EpubTextFile txt in css)
        {
            @(new HtmlString(txt.TextContent))
        }
    }

</style>

    <ErrorHandlerComponent ChildComponentName="Text Box"><ChildContent>
        @if (!initializingComponent)
        {
            <div class="highlight-textbox-wrapper">
                <div id="highlightContainer" class="highlight-container"></div>
                <div id="textContainer" @onmouseup="GetSelectedText" @ref="textContainerRef" class="text-box">
                    @if (html is not null)
                    {
                        @(
                            (MarkupString)html[currentCount].TextContent
                            )
                    }
                </div>
            </div>

            <ErrorHandlerComponent ChildComponentName="Notes component">
                <ChildContent><NotesComponent @bind-AnalysisNotes="bookAnalysis.AnalysisNotes" @bind-ChapterNotes="bookAnalysis.ChapterNotes"
                        @bind-ParagraphNotes="bookAnalysis.ParagraphNotes" currentCount="currentCount" lastClickedTextNodeIndex="lastClickedTextNodeIndex"
                        bookAnalysisId="bookAnalysis.Id" @bind-HighlightNotes="currentHighlight.HighlightNotes" currentHighlightId="currentHighlight.Id"
                        Tags="bookAnalysis.Tags"/>
                </ChildContent>
            </ErrorHandlerComponent>


            @if (isLoading)
            {
                <p>Uploading...</p>
            }
            else
            {
                <ErrorHandlerComponent ChildComponentName="Highlight Context Menu">
    <ChildContent>
        <HighlightContextMenuComponent bookAnalysis="bookAnalysis" currentHighlight="currentHighlight" @bind-editFlag="editFlag"/>
    </ChildContent>
</ErrorHandlerComponent>
}

<ErrorHandlerComponent ChildComponentName="Text Box Bar">
    <ChildContent>
        <TextBoxBarComponent bookAnalysis="bookAnalysis" @bind-currentCount="currentCount" highlight="highlight"/>
    </ChildContent>
</ErrorHandlerComponent>
        }

</ChildContent>
    </ErrorHandlerComponent>

@code{
    EpubBook book;

    [Parameter]
    public BookAnalysisDetailedModel bookAnalysis { get; set; }

    private DotNetObjectReference<TextBox> dotNetRef;
    private ElementReference textContainerRef;
    private HighlightModel currentHighlight = new HighlightModel();
    public bool editFlag = false;
    List<EpubTextFile> html;
    ICollection<EpubTextFile> css;
    ICollection<EpubByteFile> images;
    ICollection<EpubByteFile> fonts;
    public string selectedText = "none";
    private HighlightModel highlight;
    private int currentCount = 7;
    public int lastClickedTextNodeIndex = -1;
    private bool isLoading = true;
    bool initializingComponent = true;
    bool firstComponentRender = true;


    [JSInvokableAttribute("ReRender")]
    public async void ReRender()
    {
        Refresh();
    }

    void Refresh()
    {
        StateHasChanged();
    }

    async Task GetSelectedText(MouseEventArgs e)
    {
        var selectionRange = await jsRuntime.InvokeAsync<object>("getSelectedTextNodeIndex", textContainerRef);
        string items = selectionRange.ToString();


        if (items != "-1")
        {
            if (editFlag)
            {
                editFlag = false;
                var newSelection = new HighlightModel(bookAnalysis.Id, currentCount, items);
                var editedSelection = bookAnalysis.Highlights.FirstOrDefault(s => s.Id == currentHighlight.Id);
                editedSelection.Update(newSelection);
                await _highlightClientService.UpdateHighlight(editedSelection);
                await jsRuntime.InvokeVoidAsync("deletePernamentHighlight", currentHighlight.GetElementId(), editedSelection.NodeCount);
                await jsRuntime.InvokeVoidAsync("createHighlight2", "textContainer", editedSelection.FirstNodeIndex, editedSelection.FirstNodeCharIndex, editedSelection.LastNodeIndex, editedSelection.LastNodeCharIndex, dotNetRef, editedSelection.GetElementId());
            }

            //else 
            highlight = new HighlightModel(bookAnalysis.Id, currentCount, items);
        }
    }

    [JSInvokableAttribute("onTextNodeClick")]
    public async void onTextNodeClick(int lastSelectedNodeIndex, object left, object top)
    {
        lastClickedTextNodeIndex = lastSelectedNodeIndex;
        await jsRuntime.InvokeVoidAsync("setAddParagraphNotePosition", left, top, "add-paragraph-note-button");
        StateHasChanged();
    }

    [JSInvokableAttribute("onPernamentHighlightClick")]
    public async void onPernamentHighlightClick(string idToString)
    {
        currentHighlight = bookAnalysis.Highlights.FirstOrDefault(h => h.GetElementId() == idToString);
        await jsRuntime.InvokeVoidAsync("showContextMenu", dotNetRef);
        StateHasChanged();
    }

    [JSInvokableAttribute("onPernamentHighlightClickOff")]
    public async void onPernamentHighlightClickOff()
    {
        currentHighlight = new HighlightModel();
        StateHasChanged();
        //currentHighlightId = idToString;
        //currentHighlight = bookAnalysis.Highlights.FirstOrDefault(h => h.GetElementId() == idToString);
        //await jsRuntime.InvokeVoidAsync("showContextMenu");
    }

    ////img upload test
    //public void SaveImages(byte[] imageData, string extension)
    //{
    //    string basePath = AppDomain.CurrentDomain.BaseDirectory;
    //    Console.WriteLine(basePath);
    //    string imageDirectory = System.IO.Path.Combine(basePath, "wwwroot");
    //    Console.WriteLine(imageDirectory);
    //    //var imagePath = "images"; // Create a directory under "wwwroot" to store images
    //    //var imageDirectory = Path.Combine(webRootPath, imagePath);

    //    if (!Directory.Exists(imageDirectory))
    //    {
    //        return;
    //        //Directory.CreateDirectory(imageDirectory);
    //    }

    //    var uniqueFileName = $"{Guid.NewGuid()}.{extension}";
    //    var filePath = Path.Combine(imageDirectory, uniqueFileName);

    //    using (var imageStream = new MemoryStream(imageData))
    //    using (var fileStream = new FileStream(filePath, FileMode.Create))
    //    {
    //        imageStream.CopyTo(fileStream);
    //    }
    //}


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!initializingComponent)
        {
            if (firstComponentRender)
            {
                firstComponentRender = false;
                await jsRuntime.InvokeVoidAsync("setupEvent", "textContainer", dotNetRef);

                if (book is not null)
                {
                    html = book.Resources.Html.ToList();
                    css = book.Resources.Css;
                    images = book.Resources.Images;
                    //fonts = book.Resources.Fonts;
                    ////Image cover = book.CoverImage;
                    //ICollection<EpubChapter> chapters = book.TableOfContents;

                    isLoading = false;
                    StateHasChanged();
                }

                foreach (EpubByteFile im in images)
                {
                    //SaveImages(im.Content, im.ContentType.ToString());
                    //Console.WriteLine("image data:");
                    //Console.WriteLine(im.FileName);
                    //Console.WriteLine(im.ContentType);
                    //Console.WriteLine(im.MimeType);
                    //Console.WriteLine(im.Content);
                }
            }

            await jsRuntime.InvokeVoidAsync("clearDiv", "highlightContainer");

            List<HighlightModel> currentHighlights = bookAnalysis.Highlights ?? new List<HighlightModel>();

            foreach (HighlightModel highlight in currentHighlights)
            {
                if (highlight.PageNumber == currentCount && !await jsRuntime.InvokeAsync<bool>("doesHighlightExist", highlight.GetElementId()))
                {
                    await jsRuntime.InvokeVoidAsync("createHighlight2", "textContainer", highlight.FirstNodeIndex, highlight.FirstNodeCharIndex, highlight.LastNodeIndex, highlight.LastNodeCharIndex, dotNetRef, highlight.GetElementId());
                }
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var loadedBookByteArray = await bookAnalysisStorage.GetStoredBook();
        book = EpubReader.Read(loadedBookByteArray);
        bookAnalysis = await bookAnalysisStorage.GetStoredBookAnalysis();
        dotNetRef = DotNetObjectReference.Create(this);
        initializingComponent = false;

        StateHasChanged(); 
    }
}