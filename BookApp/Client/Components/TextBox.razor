@using BookApp.Client.Services.Interfaces
@using BookApp.Shared
@using BookApp.Shared.Data
@using EpubSharp
@using System.Web
@using System.Xml
@using static System.Net.Mime.MediaTypeNames
@using Microsoft.AspNetCore.Html
@using Newtonsoft.Json
@using BookApp.Client.Components

@inject IBookAnalysisClientService _bookAnalysisClientService
@inject IHighlightClientService _highlightClientService
@inject IJSRuntime jsRuntime
@inject ITagClientService _tagService

<style>
    .highlight {
    position: absolute;
    background-color: rgba(1, 1, 255, 0.8);
    z-index:9999;
    transition: zoom 0.2s;
}

    .small-window-2 {
            position:absolute;
              /*margin-top: 5%;
              margin-bottom: 5%;*/
             /* margin-right: 5%;
              margin-left: 5%;*/
              background-color:ghostwhite;
              width: 50%;
              margin: 0 auto;
    }

        .highlight-window-2 {
            position:absolute;

      background-color: rgba(255, 1, 0, 0.8);
      z-index:9999
    }

        .note-container {
          position: absolute;
      left: 0;
      top: 0;
    }

    @if (css != null)
    {
        @foreach (EpubTextFile txt in css)
        {
            @(new HtmlString(txt.TextContent))
        }
    }

</style>

@if (isLoading)
{
    <p>Uploading...</p>
}
else
{

<ul id="contextMenu" @ref="contextMenuRef" class="context-Menu">
    <li @onclick="DeleteHighlight">Delete</li>
    <li @onclick="ReApplyHighlight">Reapply Highlight</li>
    <li @onclick="AttachNoteToHighlight">Attach Note ToHighlight</li>
    <p>Current Tags: </p>
    @*@foreach(var tag in bookAnalysis.Highlights.FirstOrDefault(h => h.GetElementId() == currentHighlightId)?.Tags)
    {
        <p>@tag.Name</p>
    }*@
    <p>Add Tag: </p>
    @foreach(var tag in bookAnalysis.Tags)
    {
        <li @onclick="() => AddTag(tag.Id)">+ @tag.Name</li>
    }
</ul>

<div id="highlightContainer"></div>

<div id="noteContainer" class="note-container"></div>

<div id="overlay" @ref="overlayElementRef" class="highlight-window-2"></div>
}

<div id="textContainer" @onmouseup="GetSelectedText" @ref="textContainerRef" class="small-window-2">
    @if(html is not null)
    {
        @((MarkupString)html[currentCount].TextContent)
    }
</div>

<div class="text-box-bar">
    <!-- Your navigation bar content goes here -->
<button class="button-action" @onclick="CreatePermanentHighlight">CreatePermanentHighlight</button>
<button class="button-action" @onclick="AddNote">Add Note</button>

<div class="row">
    <div class="col">
        <button class="left-arrow-button" @onclick="() => ChangePage(-1)"></button>
    </div>
    <div class="col">
        <p role="status">Current count: @currentCount</p>
    </div>
    <div class="col">
        <button class="right-arrow-button" @onclick="() => ChangePage(1)"></button>
    </div>
</div>
</div>

@code{
    private List<TagModel> Tags = new();
    private List<IBrowserFile> loadedFiles = new();
    private long maxFileSize = 1024 * 32;
    private int maxAllowedFiles = 3;
    private bool isLoading = true;
    private byte[] fileByteArray;

    [Parameter]
    public EpubBook book { get; set; }

    [Parameter]
    public BookAnalysisModel bookAnalysis { get; set; }



    private DotNetObjectReference<TextBox> dotNetRef;
    private ElementReference textContainerRef;
    private ElementReference contextMenuRef;
    private ElementReference overlayElementRef;
    private ElementReference highlightContainerRef;

    public string currentHighlightId = string.Empty;
    private int currentHighlightIdInt;

    public string text;
    List<EpubTextFile> html;
    ICollection<EpubTextFile> css;
    ICollection<EpubByteFile> images;
    ICollection<EpubByteFile> fonts;
    public string selectedText = "none";
    bool editFlag = false;

    HighlightModel highlight;

    private int currentCount = 1;

    public List<string> overlays = new();

    async Task AddTag(int tagId)
    {
        Console.WriteLine("TagId: " + tagId);
        Console.WriteLine("Current highlight id: " + currentHighlightId);
        Console.WriteLine("Highlight id to int: " + HighlightModel.GetElementId(currentHighlightId));
        var resposne = await _tagService.AddTag(tagId, HighlightModel.GetElementId(currentHighlightId));
        if(resposne.IsSuccessStatusCode)
        {
            bookAnalysis.Highlights.FirstOrDefault(h => h.GetElementId() == currentHighlightId).Tags.Add(bookAnalysis.Tags.FirstOrDefault(t => t.Id == tagId));
        }
    }

    async Task LoadTags()
    {
        var response = await _tagService.GetTags(bookAnalysis.Id);
        var serviceResponse = await response.Content.ReadFromJsonAsync<ServiceResponse<List<TagModel>>>();
        Tags = serviceResponse.Content;
    }

    async Task AttachNoteToHighlight()
    {
        HighlightModel highlight = HighlightStorage.selectionRanges.FirstOrDefault(h => h.GetElementId() == currentHighlightId);
        if(highlight is not null)
        {
            NoteModel newNote = new NoteModel(highlight);
            //highlight.Notes.Add(newNote);
        }
    }

    async Task AddNote()
    {
        await jsRuntime.InvokeVoidAsync("addNote");
        //await notesService.CreateNote();
    }

    async Task ReApplyHighlight(MouseEventArgs e)
    {
        editFlag = true;
        await GetSelectedText(e);

        //await CreatePermanentHighlight();
        //await DeleteHighlight();
    }

    async Task DeleteHighlight()
    {
        var highlightToRemove = bookAnalysis.Highlights.FirstOrDefault(s => s.GetElementId() == currentHighlightId);
        bookAnalysis.Highlights.Remove(highlightToRemove);
        _bookAnalysisClientService.UpdateBookAnalysis(bookAnalysis);
        await jsRuntime.InvokeVoidAsync("deletePernamentHighlight", currentHighlightId, highlightToRemove.NodeCount);
    }

    async Task GetSelectedText(MouseEventArgs e)
    {
        var selectionRange = await jsRuntime.InvokeAsync<object>("getSelectedTextNodeIndex", textContainerRef);
        string items = selectionRange.ToString();

        if (items != "-1")
        {
            //if (editFlag)
            //{
            //    editFlag = false;
            //    var newSelection = new HighlightModel(items, currentCount);
            //    var editedSelection = bookAnalysis.Highlights.FirstOrDefault(s => s.ElementId == currentHighlightId);
            //    editedSelection.Update(newSelection);
            //    _bookAnalysisClientService.UpdateBookAnalysis(bookAnalysis);
            //    await jsRuntime.InvokeVoidAsync("deletePernamentHighlight", currentHighlightId, editedSelection.NodeCount);
            //    //await jsRuntime.InvokeVoidAsync("createHighlight2", "textContainer", editedSelection.FirstNodeIndex, editedSelection.FirstNodeCharIndex, editedSelection.LastNodeIndex, editedSelection.LastNodeCharIndex, objRef, editedSelection.ElementId);
            //}

            //else 
            highlight = new HighlightModel(bookAnalysis.Id, currentCount, items);
        }
        //await jsRuntime.InvokeVoidAsync("highlightText.init", textContainerRef);
    }

    private async Task CreatePermanentHighlight()
    {
        if (highlight is not null && highlight?.PageNumber == currentCount)
        {
            var elementId = highlight.GetElementId();
            await jsRuntime.InvokeVoidAsync("createHighlight2", "textContainer", highlight.FirstNodeIndex, highlight.FirstNodeCharIndex, highlight.LastNodeIndex, highlight.LastNodeCharIndex, dotNetRef, elementId);

            bookAnalysis.Highlights.Add(highlight);
            await _highlightClientService.AddHighlight(highlight);
            await _bookAnalysisClientService.UpdateBookAnalysis(bookAnalysis);
            //HighlightStorage.selectionRanges.Add(highlight);
        }
    }

    [JSInvokableAttribute("GetClickedNodeIndex")]
    public async void GetClickedNodeIndex(int clickedNodeIndex)
    {
        Console.WriteLine();
    }

    [JSInvokableAttribute("onPernamentHighlightClick")]
    public async void onPernamentHighlightClick(string idToString)
    {
        currentHighlightId = idToString;    
        await jsRuntime.InvokeVoidAsync("showContextMenu");
    }

    private async void ChangePage(int page)
    {
        currentCount += page;
        await jsRuntime.InvokeVoidAsync("clearDiv", "highlightContainer");
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            await jsRuntime.InvokeVoidAsync("setupEvent", "textContainer");

            if (book is not null)
            {   
                html = book.Resources.Html.ToList();
                css = book.Resources.Css;
                images = book.Resources.Images;
                //fonts = book.Resources.Fonts;
                ////Image cover = book.CoverImage;
                //ICollection<EpubChapter> chapters = book.TableOfContents;

                isLoading = false;
                StateHasChanged();
            }
        }

        foreach(HighlightModel highlight in bookAnalysis.Highlights)
        {
            if(highlight.PageNumber == currentCount && !await jsRuntime.InvokeAsync<bool>("doesHighlightExist", highlight.GetElementId()))
                await jsRuntime.InvokeVoidAsync("createHighlight2", "textContainer", highlight.FirstNodeIndex, highlight.FirstNodeCharIndex, highlight.LastNodeIndex, highlight.LastNodeCharIndex, dotNetRef, highlight.GetElementId());
        }
    }

    protected override async Task OnInitializedAsync()
    {
        dotNetRef = DotNetObjectReference.Create(this);
    }
}