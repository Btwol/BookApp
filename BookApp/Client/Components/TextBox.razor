@using BookApp.Client.Services.Interfaces
@using BookApp.Shared
@using BookApp.Shared.Data
@using EpubSharp
@using System.Web
@using System.Xml
@using static System.Net.Mime.MediaTypeNames
@using Microsoft.AspNetCore.Html
@using Newtonsoft.Json
@using BookApp.Client.Components

@inject IBookAnalysisClientService _bookAnalysisClientService
@inject IJSRuntime jsRuntime

<style>
    .highlight {
    position: absolute;
    background-color: rgba(1, 1, 255, 0.8);
    z-index:9999;
    transition: zoom 0.2s;
}

    .small-window-2 {
            position:absolute;
              margin-top: 5%;
              margin-bottom: 5%;
              margin-right: 5%;
              margin-left: 5%;
    }

        .highlight-window-2 {
            position:absolute;

      background-color: rgba(255, 1, 0, 0.8);
      z-index:9999
    }

        .note-container {
          position: absolute;
      left: 0;
      top: 0;
    }

    @if (css != null)
    {
        @foreach (EpubTextFile txt in css)
        {
            @(new HtmlString(txt.TextContent))
        }
    }
</style>

@*
<button class="btn btn-primary" @onclick="AddNote">Add Note</button>

<ul id="contextMenu" @ref="contextMenuRef" style="display: none; position: absolute; background-color: #f9f9f9; border: 1px solid #ccc; padding: 5px; list-style-type: none;">
    <li @onclick="DeleteHighlight">Delete</li>
    <li @onclick="ReApplyHighlight">Reapply Highlight</li>
    <li @onclick="AttachNoteToHighlight">Attach Note ToHighlight</li>
</ul>

<button @onclick="CreatePermanentHighlight">CreatePermanentHighlight</button>


<div class="row">
    <div class="col">
        <button class="btn btn-primary" @onclick="DecreaseCount">a-</button>
    </div>
    <div class="col">
        <p role="status">Current count: @currentCount</p>
    </div>
    <div class="col">
        <button class="btn btn-primary" @onclick="IncrementCount">-a</button>
    </div>
</div>

<div id="highlightContainer"></div>

<div id="noteContainer" class="note-container"></div>

<div id="overlay" @ref="overlayElementRef" class="highlight-window-2"></div>

<div id="textContainer" @onmouseup="GetSelectedText" @ref="textContainerRef" class="small-window-2">
        @((MarkupString)html[currentCount].TextContent)
</div>*@

@if (isLoading)
{
    <p>Uploading...</p>
}
else
{

    
<button class="btn btn-primary" @onclick="AddNote">Add Note</button>

<ul id="contextMenu" @ref="contextMenuRef" style="display: none; position: absolute; background-color: #f9f9f9; border: 1px solid #ccc; padding: 5px; list-style-type: none;">
    <li @onclick="DeleteHighlight">Delete</li>
    <li @onclick="ReApplyHighlight">Reapply Highlight</li>
    <li @onclick="AttachNoteToHighlight">Attach Note ToHighlight</li>
</ul>

<button @onclick="CreatePermanentHighlight">CreatePermanentHighlight</button>


<div class="row">
    <div class="col">
        <button class="btn btn-primary" @onclick="() => ChangePage(-1)">a-</button>
    </div>
    <div class="col">
        <p role="status">Current count: @currentCount</p>
    </div>
    <div class="col">
        <button class="btn btn-primary" @onclick="() => ChangePage(1)">-a</button>
    </div>
</div>

<div id="highlightContainer"></div>

<div id="noteContainer" class="note-container"></div>

<div id="overlay" @ref="overlayElementRef" class="highlight-window-2"></div>




}

<div id="textContainer" @onmouseup="GetSelectedText" @ref="textContainerRef" class="small-window-2">
    @if(html is not null)
    {
        @((MarkupString)html[currentCount].TextContent)
    }
</div>

@code{

    private List<IBrowserFile> loadedFiles = new();
    private long maxFileSize = 1024 * 32;
    private int maxAllowedFiles = 3;
    private bool isLoading = true;
    private byte[] fileByteArray;

    [Parameter]
    public EpubBook book { get; set; }

    [Parameter]
    public BookAnalysisModel bookAnalysis { get; set; }



    private DotNetObjectReference<TextBox> dotNetRef;
    private ElementReference textContainerRef;
    private ElementReference contextMenuRef;
    private ElementReference overlayElementRef;
    private ElementReference highlightContainerRef;

    public string currentHighlightId;
    public string text;
    List<EpubTextFile> html;
    ICollection<EpubTextFile> css;
    ICollection<EpubByteFile> images;
    ICollection<EpubByteFile> fonts;
    public string selectedText = "none";
    bool editFlag = false;

    HighlightModel highlight;

    private int currentCount = 1;

    public List<string> overlays = new();

    async Task AttachNoteToHighlight()
    {
        HighlightModel highlight = HighlightStorage.selectionRanges.FirstOrDefault(h => h.ElementId == currentHighlightId);
        if(highlight is not null)
        {
            NoteModel newNote = new NoteModel(highlight);
            highlight.Notes.Add(newNote);
        }
    }

    async Task AddNote()
    {
        await jsRuntime.InvokeVoidAsync("addNote");
        //await notesService.CreateNote();
    }

    async Task ReApplyHighlight(MouseEventArgs e)
    {
        editFlag = true;
        await GetSelectedText(e);

        //await CreatePermanentHighlight();
        //await DeleteHighlight();
    }

    async Task DeleteHighlight()
    {
        var highlightToRemove = bookAnalysis.Highlights.FirstOrDefault(s => s.ElementId == currentHighlightId);
        bookAnalysis.Highlights.Remove(highlightToRemove);
        _bookAnalysisClientService.UpdateBookAnalysis(bookAnalysis);
        await jsRuntime.InvokeVoidAsync("deletePernamentHighlight", currentHighlightId, highlightToRemove.NodeCount);
    }

    async Task GetSelectedText(MouseEventArgs e)
    {
        var selectionRange = await jsRuntime.InvokeAsync<object>("getSelectedTextNodeIndex", textContainerRef);
        string items = selectionRange.ToString();

        if (items != "-1")
        {
            if (editFlag)
            {
                editFlag = false;
                var newSelection = new HighlightModel(items, currentCount);
                var editedSelection = bookAnalysis.Highlights.FirstOrDefault(s => s.ElementId == currentHighlightId);
                editedSelection.Update(newSelection);
                _bookAnalysisClientService.UpdateBookAnalysis(bookAnalysis);
                await jsRuntime.InvokeVoidAsync("deletePernamentHighlight", currentHighlightId, editedSelection.NodeCount);
                //await jsRuntime.InvokeVoidAsync("createHighlight2", "textContainer", editedSelection.FirstNodeIndex, editedSelection.FirstNodeCharIndex, editedSelection.LastNodeIndex, editedSelection.LastNodeCharIndex, objRef, editedSelection.ElementId);
            }

            else highlight = new HighlightModel(items, currentCount);
        }
        //await jsRuntime.InvokeVoidAsync("highlightText.init", textContainerRef);
    }

    private async Task CreatePermanentHighlight()
    {
        if (highlight is not null && highlight?.PageNumber == currentCount)
        {
            var elementId = highlight.ElementId;
            await jsRuntime.InvokeVoidAsync("createHighlight2", "textContainer", highlight.FirstNodeIndex, highlight.FirstNodeCharIndex, highlight.LastNodeIndex, highlight.LastNodeCharIndex, dotNetRef, elementId);

            bookAnalysis.Highlights.Add(highlight);
            await _bookAnalysisClientService.UpdateBookAnalysis(bookAnalysis);
            //HighlightStorage.selectionRanges.Add(highlight);
        }
    }

    [JSInvokableAttribute("GetClickedNodeIndex")]
    public async void GetClickedNodeIndex(int clickedNodeIndex)
    {
        Console.WriteLine();
    }

    [JSInvokableAttribute("onPernamentHighlightClick")]
    public async void onPernamentHighlightClick(string idToString)
    {
        currentHighlightId = idToString;    
        await jsRuntime.InvokeVoidAsync("showContextMenu");
    }

    private async void ChangePage(int page)
    {
        currentCount += page;
        await jsRuntime.InvokeVoidAsync("clearDiv", "highlightContainer");
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            await jsRuntime.InvokeVoidAsync("setupEvent", "textContainer");

            if (book is not null)
            {   
                html = book.Resources.Html.ToList();
                css = book.Resources.Css;
                //images = book.Resources.Images;
                //fonts = book.Resources.Fonts;
                ////Image cover = book.CoverImage;
                //ICollection<EpubChapter> chapters = book.TableOfContents;

                isLoading = false;
                StateHasChanged();
            }
        }

        foreach(HighlightModel highlight in bookAnalysis.Highlights)
        {
            if(highlight.PageNumber == currentCount && !await jsRuntime.InvokeAsync<bool>("doesHighlightExist", highlight.ElementId))
                await jsRuntime.InvokeVoidAsync("createHighlight2", "textContainer", highlight.FirstNodeIndex, highlight.FirstNodeCharIndex, highlight.LastNodeIndex, highlight.LastNodeCharIndex, dotNetRef, highlight.ElementId);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        dotNetRef = DotNetObjectReference.Create(this);
    }
}