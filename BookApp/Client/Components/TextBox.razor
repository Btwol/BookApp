@page "/reader"
@using BookApp.Client.Models
@inject IBookAnalysisClientService _bookAnalysisClientService
@inject IHighlightClientService _highlightClientService
@inject IJSRuntime jsRuntime
@inject ITagClientService _tagService
@inject IAppStorage appStorage
@inject IHubClientService hubService


<style>
    @if (css != null)
    {
        @foreach (EpubTextFile txt in css)
        {
            @(new HtmlString(txt.TextContent))
        }
    }
    .text-box-container
    {
        min-height:90vh;
        height:fit-content; 
        width:inherit;
        border-style:solid; 
        border-width:2px; 
        border-color:black; 
    }

    .light-mode * {
        background-color:#cccccc;
        color:black;
    }

    .dark-mode * {
        background-color:#101010;
        color:white;
    }

    .font-size-override * {
        font-size: 20px;
    }
            .highlight-container {
            position: absolute;
        }
    
        .highlight-textbox-wrapper {
            position: sticky;
            height: 100%;
            width: 60%;
            top: 0;
            left:20%;
            padding:5px;
        }

</style>

<ErrorHandlerComponent ChildComponentName="Text Box">
    <ChildContent>
        @if (!initializingComponent)
        {
            <div class="highlight-textbox-wrapper">
                <div id="paragraphSelectionId" style="position: absolute;"></div>
                <div id="highlightContainer" class="highlight-container"></div>
                <div class="light-mode" style="width: 100%; height:100%">
                    <div class="font-size-override  text-box text-box-container" id="textContainer" @onmouseup="GetSelectedText" @ref="textContainerRef">
                        @if (html is not null)
                        {
                            @((MarkupString)html[currentCount].TextContent)
                        }
                    </div>
                </div>
            </div>

            <ErrorHandlerComponent ChildComponentName="Notes component">
                <ChildContent>
                    <NotesComponent AnalysisNotes="bookAnalysis.AnalysisNotes" ChapterNotes="bookAnalysis.ChapterNotes"
                                ParagraphNotes="bookAnalysis.ParagraphNotes" currentCount="currentCount" lastClickedTextNodeIndex="lastClickedTextNodeIndex"
                                bookAnalysisId="bookAnalysis.Id" HighlightNotes="currentHighlight.HighlightNotes" currentHighlightId="currentHighlight.Id"
                                Tags="bookAnalysis.Tags" />
                </ChildContent>
            </ErrorHandlerComponent>


            @if (isLoading)
            {
                <p>Uploading...</p>
            }
            else
            {
                <ErrorHandlerComponent ChildComponentName="Highlight Context Menu">
                    <ChildContent>
                        <HighlightContextMenuComponent bookAnalysis="bookAnalysis" currentHighlight="currentHighlight" @bind-editFlag="editFlag" />
                    </ChildContent>
                </ErrorHandlerComponent>
            }

            <ErrorHandlerComponent ChildComponentName="Text Box Bar">
                <ChildContent>
                    <TextBoxBarComponent bookAnalysis="bookAnalysis" @bind-currentCount="currentCount" highlight="highlight" totalPages="html.Count()" />
                </ChildContent>
            </ErrorHandlerComponent>
        }
        else 
        {
            <h3>Loading reader...</h3>
        }
    </ChildContent>
</ErrorHandlerComponent>

@code{
    [Parameter]
    public BookAnalysisDetailedModel bookAnalysis { get; set; }
    EpubBook book;
    private DotNetObjectReference<TextBox> dotNetRef;
    private ElementReference textContainerRef;
    private HighlightModel currentHighlight = new HighlightModel();
    public bool editFlag = false;
    List<EpubTextFile> html;
    ICollection<EpubTextFile> css;
    ICollection<EpubByteFile> images;
    ICollection<EpubByteFile> fonts;
    public string selectedText = "none";
    private HighlightModel highlight;
    private int currentCount = 7;
    public int lastClickedTextNodeIndex = -1;
    private bool isLoading = true;
    bool initializingComponent = true;
    bool firstComponentRender = true;
    private bool userHasEditRights = false;
    ReaderPosition readerPosition = new();

    [JSInvokableAttribute("ReRender")]
    public async void ReRender()
    {
        StateHasChanged();
    }

    async Task GetSelectedText(MouseEventArgs e)
    {
        if (!userHasEditRights)
        {
            return;
        }

        var selectionRange = await jsRuntime.InvokeAsync<object>("getSelectedTextNodeIndex", textContainerRef);
        string items = selectionRange.ToString();

        if (items != "-1")
        {
            if (editFlag)
            {
                editFlag = false;
                var newSelection = new HighlightModel(bookAnalysis.Id, currentCount, items);
                var editedSelection = bookAnalysis.Highlights.FirstOrDefault(s => s.Id == currentHighlight.Id);
                editedSelection.Update(newSelection);
                await _highlightClientService.UpdateHighlight(editedSelection);
            }
            highlight = new HighlightModel(bookAnalysis.Id, currentCount, items);
        }
    }

    [JSInvokableAttribute("onTextNodeClick")]
    public async void onTextNodeClick(int lastSelectedNodeIndex, object left, object top)
    {
        lastClickedTextNodeIndex = lastSelectedNodeIndex;
        StateHasChanged();
    }

    [JSInvokableAttribute("onPernamentHighlightClick")]
    public async void onPernamentHighlightClick(string idToString)
    {
        currentHighlight = bookAnalysis.Highlights.FirstOrDefault(h => h.GetElementId() == idToString);
        await jsRuntime.InvokeVoidAsync("showContextMenu", dotNetRef);
        StateHasChanged();
    }

    [JSInvokableAttribute("onPernamentHighlightClickOff")]
    public async void onPernamentHighlightClickOff()
    {
        currentHighlight = new HighlightModel();
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!initializingComponent)
        {
            if (firstComponentRender)
            {
                firstComponentRender = false;
                await jsRuntime.InvokeVoidAsync("setupEvent", "textContainer", dotNetRef);

                await RenderHighlights();

                readerPosition = await appStorage.GetLastReaderPosition();

                if(!string.IsNullOrEmpty(readerPosition.ElementIdToScrollTo))
                {
                    var scrollPoistion = await jsRuntime.InvokeAsync<string>("getElementScrollPosition", readerPosition.ElementIdToScrollTo);
                    var scroll = scrollPoistion.Replace("px", "").Substring(0, scrollPoistion.Replace("px", "").IndexOf('.'));

                    if(double.TryParse(scroll , out double _scrollPosition))
                    {
                        await jsRuntime.InvokeVoidAsync("scrollToPosition", _scrollPosition-200);
                    }
                }
                else
                {
                    await jsRuntime.InvokeVoidAsync("scrollToPosition", readerPosition.ScrollPosition);
                }
            }

            await RenderHighlights();

            await appStorage.SetReaderPosition(new ReaderPosition 
                { 
                    Page = currentCount,
                    ScrollPosition = await jsRuntime.InvokeAsync<double>("getScrollPosition") 
                });
        }
    }

    async Task RenderHighlights()
    {
        try
        {
            await jsRuntime.InvokeVoidAsync("clearDiv", "highlightContainer");

            if (lastClickedTextNodeIndex != -1)
            {
                await jsRuntime.InvokeVoidAsync("renderParagraphHighlight", lastClickedTextNodeIndex);
            }

            foreach (HighlightModel highlight in bookAnalysis.Highlights)
            {
                if (highlight.PageNumber == currentCount && !await jsRuntime.InvokeAsync<bool>("doesHighlightExist", highlight.GetElementId()))
                {
                    await jsRuntime.InvokeVoidAsync("createHighlight2", "textContainer", highlight.FirstNodeIndex, highlight.FirstNodeCharIndex, highlight.LastNodeIndex, highlight.LastNodeCharIndex, dotNetRef, highlight.GetElementId());
                }
            }
        }
        catch { }
    }

    protected override async Task OnInitializedAsync()
    {
        var loadedBookByteArray = await appStorage.GetStoredBook();
        book = EpubReader.Read(loadedBookByteArray);
        bookAnalysis = await appStorage.GetStoredBookAnalysis();

        dotNetRef = DotNetObjectReference.Create(this);

        var currentUser = await appStorage.GetStoredUser();
        userHasEditRights = await appStorage.UserHasStoredAnalysisEditorialRights();

        await hubService.RegisterReaderHub(this);

        if (book is not null)
        {
            html = book.Resources.Html.ToList();
            css = book.Resources.Css;
            images = book.Resources.Images;
            readerPosition = await appStorage.GetLastReaderPosition();
            currentCount = readerPosition.Page;
            isLoading = false;
            StateHasChanged();
        }

        initializingComponent = false;
        StateHasChanged(); 
    }
}