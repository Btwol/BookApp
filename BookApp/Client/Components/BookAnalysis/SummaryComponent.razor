<p>Include Tag</p>
@*<input type="text" @oninput="FilterTags" placeholder="Search By Tags..." class="form-control" />*@
@foreach (TagModel tag in filteredTags)
{
    @if (!includedTags.Any(t => t.Id == tag.Id))
    {
        <button class="tag-item" @onclick="() => AddTag(tag.Id)">@tag.Name</button>
    }
    else
    {
        <button class="tag-item" style="background-color:white; color:black" @onclick="() => RemoveTag(tag.Id)">@tag.Name</button>
    }
}

<hr />

<h3>Highlights</h3>
@foreach(var highlight in filteredHighlights)
{
    <div class="highlight">@highlight.Id</div>
    <h5>Notes:</h5>
    @foreach(var note in highlight.HighlightNotes)
    {
        <p>@note.Content</p>
    }
}

<h3>Analysis Notes</h3>
@foreach (var note in filteredAnalysisNotes)
{
    <p>@note.Content</p>
}

<h3>Chapter Notes</h3>
@foreach (var note in filteredChapterNotes)
{
    <p>@note.Content</p>
}

<h3>Paragraph Notes</h3>
@foreach (var note in filteredParagraphNotes)
{
    <p>@note.Content</p>
}

@code {
    [Parameter]
    public BookAnalysisModel bookAnalysis { get; set; }

    private List<HighlightModel> filteredHighlights { get; set; } = new();
    private List<HighlightNoteModel> filteredHighlightNotes { get; set; } = new();
    private List<AnalysisNoteModel> filteredAnalysisNotes { get; set; } = new();
    private List<ParagraphNoteModel> filteredParagraphNotes { get; set; } = new();
    private List<ChapterNoteModel> filteredChapterNotes { get; set; } = new();
    private List<TagModel> filteredTags { get; set; } = new();
    private List<TagModel> includedTags { get; set; } = new();

    private string tagSearchKeyword = "";
    private string buttonToggle = "";
    private string disabledButtonStyle = "pointer-events: none; background-color: gray";

    private void FilterTags(ChangeEventArgs e)
    {
        tagSearchKeyword = e.Value.ToString();
        Console.WriteLine("current: " + e.Value);
        filteredTags = string.IsNullOrWhiteSpace(tagSearchKeyword)
            ? bookAnalysis.Tags
            : bookAnalysis.Tags.Where(t => t.Name.Contains(tagSearchKeyword, StringComparison.OrdinalIgnoreCase)).ToList();

        FilterByTag();
    }

    private void FilterByTag()
    {
        filteredHighlights = bookAnalysis.Highlights.Where(h => includedTags.All(t => h.Tags.Any(ht => ht.Id == t.Id))).ToList();
        //filteredHighlightNotes = bookAnalysis.Highlights.Where(h => includedTags.All(t => h.Tags.Any(ht => ht.Id == t.Id))).ToList();
        filteredAnalysisNotes = bookAnalysis.AnalysisNotes.Where(h => includedTags.All(t => h.Tags.Any(ht => ht.Id == t.Id))).ToList();
        filteredParagraphNotes = bookAnalysis.ParagraphNotes.Where(h => includedTags.All(t => h.Tags.Any(ht => ht.Id == t.Id))).ToList();
        filteredChapterNotes = bookAnalysis.ChapterNotes.Where(h => includedTags.All(t => h.Tags.Any(ht => ht.Id == t.Id))).ToList();
    }

    public async Task AddTag(int tagId)
    {
        if (!includedTags.Any(t => t.Id == tagId))
        {
            includedTags.Add(bookAnalysis.Tags.FirstOrDefault(t => t.Id == tagId));
        }
        FilterByTag();
    }

    public async Task RemoveTag(int tagId)
    {
        if (includedTags.Any(t => t.Id == tagId))
        {
            includedTags.Remove(bookAnalysis.Tags.FirstOrDefault(t => t.Id == tagId));
        }
        FilterByTag();
    }

    protected override void OnInitialized()
    {
        filteredTags = bookAnalysis.Tags;
        FilterByTag();
    }
}
