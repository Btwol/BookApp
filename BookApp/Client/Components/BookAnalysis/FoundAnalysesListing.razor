@inject IModalService Modal
@inject IBookAnalysisClientService _bookAnalysisClientService
@inject IAppStorage appStorage
@inject IAnalysisMembershipClientService analysisMembershipClientService
@inject IAppUserClientService appUserClientService
@inject NavigationManager Navigation

<style>
    .book-analysis-listing {
        margin: 5px;
        width: 100%;
        padding: 10px;
        border: 2px solid black;
        border-radius: 5px;
        background-color: #dddddd;
    }
</style>

@foreach (BookAnalysisSummaryModel bookAnalysis in foundBookAnalyses)
{
    <div class="book-analysis-listing">
        <b>Analysis Title: </b>
        <p>@bookAnalysis.AnalysisTitle</p>
        <hr />
      
        <b>Admin:</b>
        <p>@bookAnalysis.Members.FirstOrDefault(u => u.Item2 == MemberType.Administrator).Item1.Email</p>
        <hr />

        <button class="button-action" @onclick="() => ViewAnalysisDetails(bookAnalysis.Id)">Details</button>
    </div>
}

@code {
    [Parameter]
    public List<BookAnalysisSummaryModel> foundBookAnalyses { get; set; } = new();

    [Parameter]
    public BookAnalysisDetailedModel selectedBookAnalysis { get; set; }

    [Parameter]
    public EventCallback<BookAnalysisDetailedModel> selectedBookAnalysisChanged { get; set; }

    public AppUserModel currentUser = new();

    private void ViewAnalysisDetails(int bookAnalysisId)
    {
        Navigation.NavigateTo($"analysisDetails?{bookAnalysisId}");
    }

    protected async override Task OnInitializedAsync()
    {
        if(!await appStorage.UserIsStored())
        {
            throw new Exception("User is not logged in.");
        }
        currentUser = await appStorage.GetStoredUser();
    }
}
