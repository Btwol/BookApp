@inject IModalService Modal
@inject IBookAnalysisClientService _bookAnalysisClientService
@inject IAppStorage appStorage
@inject IAnalysisMembershipClientService analysisMembershipClientService
@inject IAppUserClientService appUserClientService
@inject NavigationManager Navigation

@foreach (BookAnalysisSummaryModel bookAnalysis in foundBookAnalyses)
{
    <div class="book-analysis-listing">
        <b>Analysis Title: </b>
        <p>@bookAnalysis.AnalysisTitle</p>
        <hr />
      
        <b>Admin:</b>
        <p>@bookAnalysis.Members.FirstOrDefault(u => u.Value == MemberType.Administrator).Key.Email</p>
        <hr />

        @*@if (CurrentUserIsOfMemberType(bookAnalysis, MemberType.Administrator, MemberType.Moderator, MemberType.Editor, MemberType.Viewer))
        {
            <button class="button-action" @onclick="() => LoadAnalysis(bookAnalysis)">Load analysis</button>
        }*@
        <button class="button-action" @onclick="() => ViewAnalysisDetails(bookAnalysis.Id)">Details</button>
    </div>
}

@code {
    [Parameter]
    public List<BookAnalysisSummaryModel> foundBookAnalyses { get; set; } = new();

    [Parameter]
    public BookAnalysisDetailedModel selectedBookAnalysis { get; set; }

    [Parameter]
    public EventCallback<BookAnalysisDetailedModel> selectedBookAnalysisChanged { get; set; }

    public AppUserModel currentUser = new();

    //private async Task LoadAnalysis(BookAnalysisSummaryModel selectedBookAnalysis)
    //{
    //    this.selectedBookAnalysis = await _bookAnalysisClientService.GetAnalysisById(selectedBookAnalysis.Id);

    //    var userMembershipType = selectedBookAnalysis.Members.FirstOrDefault(m => m.Key.Id == currentUser.Id).Value;
    //    bool editorialRights = (userMembershipType == MemberType.Administrator
    //    || userMembershipType == MemberType.Moderator
    //    || userMembershipType == MemberType.Editor) ? true : false;

    //    await appStorage.StoreBookAnalysis(this.selectedBookAnalysis, editorialRights);
    //    await selectedBookAnalysisChanged.InvokeAsync(this.selectedBookAnalysis);

    //    Navigation.NavigateTo("redirect?reader");
    //}

    private void ViewAnalysisDetails(int bookAnalysisId)
    {
        Navigation.NavigateTo($"analysisDetails?{bookAnalysisId}");
    }

    //private bool CurrentUserIsOfMemberType(BookAnalysisSummaryModel bookAnalysis, params MemberType[] memberTypes)
    //{
    //    return bookAnalysis.Members.Any(m => memberTypes.Contains(m.Value) && m.Key.Id == currentUser.Id);
    //}

    protected async override Task OnInitializedAsync()
    {
        if(!await appStorage.UserIsStored())
        {
            throw new Exception("User is not logged in.");
        }
        currentUser = await appStorage.GetStoredUser();
    }
}
