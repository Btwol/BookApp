@inject IModalService Modal
@inject IBookAnalysisClientService _bookAnalysisClientService

@foreach (BookAnalysisSummaryModel bookAnalysis in foundBookAnalyses)
{
    <div class="book-analysis-listing">
        <b>Analysis Title: </b>
        <p>@bookAnalysis.AnalysisTitle</p>
        <hr />
        <b>Book Hash: </b>
        <p>@bookAnalysis.BookHash</p>
        <hr />
        <b>Book Title: </b>
        <p>@bookAnalysis.BookTitle</p>
        <hr />
        <b>Authors:</b>
        @foreach (string author in bookAnalysis.Authors)
        {
            <p>@author</p>
        }
        <hr />
        <b>Members:</b>
        @foreach (var member in bookAnalysis.Members)
        {
            <p>@member.Key.Email | @member.Value.ToString()</p>
        }
        <hr />
        <button class="button-action" @onclick="() => LoadAnalysis(bookAnalysis)">Load analysis</button>
        <button class="button-action" @onclick="() => DeleteAnalysis(bookAnalysis)">Delete analysis</button>
        <button class="button-action" @onclick="() => ShowEditAnalysisModal(bookAnalysis)">Edit analysis</button>
    </div>
    <hr />
}

@code {
    [Parameter]
    public List<BookAnalysisSummaryModel> foundBookAnalyses { get; set; } = new();

    [Parameter]
    public BookAnalysisDetailedModel selectedBookAnalysis { get; set; }

    [Parameter]
    public EventCallback<BookAnalysisDetailedModel> selectedBookAnalysisChanged { get; set; }


    private async Task ShowEditAnalysisModal(BookAnalysisSummaryModel bookAnalysis)
    {
        var parameters = new ModalParameters().Add(nameof(EditAnalysis.analysisToEdit), bookAnalysis);
        var modal = Modal.Show<EditAnalysis>("Edit Analysis", parameters);
        await modal.Result;
    }

    private async Task DeleteAnalysis(BookAnalysisSummaryModel analysisToDelete)
    {
        await _bookAnalysisClientService.DeleteBookAnalysis(analysisToDelete.Id);

        foundBookAnalyses.Remove(analysisToDelete);
        StateHasChanged();
    }

    private async Task LoadAnalysis(BookAnalysisSummaryModel selectedBookAnalysis)
    {
        this.selectedBookAnalysis = await _bookAnalysisClientService.GetAnalysisById(selectedBookAnalysis.Id);
        await selectedBookAnalysisChanged.InvokeAsync(this.selectedBookAnalysis);
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        ////var presetAnalysis = foundBookAnalyses.FirstOrDefault(a => a.AnalysisTitle == "presetAnalysis");
        //if(presetAnalysis is not null)
        //{
        //    await LoadAnalysis(presetAnalysis);
        //}
    }
}
