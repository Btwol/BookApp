@page "/analysisDetails"

@inject IModalService Modal
@inject IBookAnalysisClientService _bookAnalysisClientService
@inject IAppStorage appStorage
@inject IAnalysisMembershipClientService analysisMembershipClientService
@inject IAppUserClientService appUserClientService
@inject NavigationManager Navigation
@inject IJSRuntime _jsRuntime
@inject IHubClientService hubService
@inject IAnalysisUpdaterClientService analysisUpdaterService


<style>
    .analysis-details-box {
        position: sticky;
        margin-left: auto;
        margin-right: auto;
        margin-top: auto;
        margin-bottom: auto;
        border-radius: 5px;
        height: fit-content;
        width: 50%;
        display: flex;
        flex-direction: column;
        justify-content: left;
        align-items: left;
        padding: 10px;
        font-size: 20px;
    }
</style>

<div style="width:100%; height:50%; position:absolute; top:5%">
    <div class="analysis-details-box">
        <ErrorHandlerComponent ChildComponentName="Analysis details">
            <ChildContent>
                <b>Analysis Title: </b>
                <p>@BookAnalysis.AnalysisTitle</p>
                <hr />
                <b>Book Hash: </b>
                <p>@BookAnalysis.BookHash</p>
                <hr />
                <b>Book Title: </b>
                <p>@BookAnalysis.BookTitle</p>
                <hr />
                <b>Authors:</b>
                @foreach (string author in BookAnalysis.Authors)
                {
                    <p>@author</p>
                }
                <hr />

                @if (CurrentUserIsOfMemberType(BookAnalysis, MemberType.Administrator, MemberType.Moderator))
                {
                    <p>Invite user...</p>
                    <input type="text" @onchange="SearchUserByEmail" style="width:fit-content;" placeholder="Search user by email..." class="form-control" />
                    @if (!string.IsNullOrEmpty(searchErrorMessage))
                    {
                        <p class="text-danger">@searchErrorMessage</p>
                    }
                    @if (userToInvite is not null)
                    {
                        <button class="button-action" @onclick="() => InviteUser(BookAnalysis.Id)">Invite</button>
                    }
                    <hr />
                }

                @if (CurrentUserIsOfMemberType(BookAnalysis, MemberType.Invited))
                {
                    <p>Invitation pending</p>
                    <button class="button-action" @onclick="() => AcceptInvite(BookAnalysis.Id)">Accept</button>
                    <button class="button-action" @onclick="() => DeclineInvite(BookAnalysis.Id)">Decline</button>
                    <hr />
                }

                @if (BookAnalysis.Members.Any(u => u.Value == MemberType.Administrator))
                {
                    <b>Admin:</b>
                    <p>@BookAnalysis.Members.FirstOrDefault(u => u.Value == MemberType.Administrator).Key.Email</p>
                    <hr />
                }

                @if (BookAnalysis.Members.Any(u => u.Value == MemberType.Moderator))
                {
                    <b>Moderators:</b>
                    @foreach (var member in BookAnalysis.Members.Where(u => u.Value == MemberType.Moderator))
                    {
                        <p>@member.Key.Email</p>
                        @if (CurrentUserIsOfMemberType(BookAnalysis, MemberType.Administrator))
                        {
                            <select @bind="memberType">
                                @foreach (var item in memberTypeOptions.Where(o => o != member.Value))
                                {
                                    <option value="@item">@item.ToString()</option>
                                }
                            </select>
                            <button class="button-action" @onclick="() => ChangeMemberType(BookAnalysis.Id, member.Key.Id)">Change member type</button>
                            <button class="button-action" @onclick="() => KickUser(BookAnalysis.Id, member.Key.Id)">Kick</button>
                        }
                    }
                    <hr />
                }

                @if (BookAnalysis.Members.Any(u => u.Value == MemberType.Editor))
                {
                    <b>Editors:</b>
                    @foreach (var member in BookAnalysis.Members.Where(u => u.Value == MemberType.Editor))
                    {
                        <p>@member.Key.Email</p>
                        @if (CurrentUserIsOfMemberType(BookAnalysis, MemberType.Administrator))
                        {
                            <select @bind="memberType">
                                @foreach (var item in memberTypeOptions.Where(o => o != member.Value))
                                {
                                    <option value="@item">@item.ToString()</option>
                                }
                            </select>
                            <button class="button-action" @onclick="() => ChangeMemberType(BookAnalysis.Id, member.Key.Id)">Change member type</button>
                            <button class="button-action" @onclick="() => KickUser(BookAnalysis.Id, member.Key.Id)">Kick</button>
                        }
                    }
                    <hr />
                }

                @if (BookAnalysis.Members.Any(u => u.Value == MemberType.Viewer))
                {
                    <b>Viewers:</b>
                    @foreach (var member in BookAnalysis.Members.Where(u => u.Value == MemberType.Viewer))
                    {
                        <p>@member.Key.Email</p>
                        @if (CurrentUserIsOfMemberType(BookAnalysis, MemberType.Administrator))
                        {
                            <select @bind="memberType">
                                @foreach (var item in memberTypeOptions.Where(o => o != member.Value))
                                {
                                    <option value="@item">@item.ToString()</option>
                                }
                            </select>
                            <button class="button-action" @onclick="() => ChangeMemberType(BookAnalysis.Id, member.Key.Id)">Change member type</button>
                            <button class="button-action" @onclick="() => KickUser(BookAnalysis.Id, member.Key.Id)">Kick</button>
                        }
                    }
                    <hr />
                }

                @if (BookAnalysis.Members.Any(u => u.Value == MemberType.Invited))
                {
                    <b>Invited:</b>
                    @foreach (var member in BookAnalysis.Members.Where(u => u.Value == MemberType.Invited))
                    {
                        <p>@member.Key.Email</p>
                        @if (CurrentUserIsOfMemberType(BookAnalysis, MemberType.Administrator))
                        {
                            <button class="button-action" @onclick="() => KickUser(BookAnalysis.Id, member.Key.Id)">Uninvite</button>
                        }
                    }
                    <hr />
                }

                @if (CurrentUserIsOfMemberType(BookAnalysis, MemberType.Administrator, MemberType.Moderator, MemberType.Editor, MemberType.Viewer))
                {
                    <button class="button-action" @onclick="() => LoadAnalysis(BookAnalysis)">Load analysis</button>
                }
                @if (CurrentUserIsOfMemberType(BookAnalysis, MemberType.Administrator, MemberType.Moderator))
                {
                    <button class="button-action" @onclick="() => ShowEditAnalysisModal(BookAnalysis)">Edit analysis</button>
                }
                @if (CurrentUserIsOfMemberType(BookAnalysis, MemberType.Administrator))
                {
                    @if (deletingAnalysis)
                    {
                        <input placeholder="Enter analysis title to delete it" style="width:100%" @bind="deletedAnalysisTitle" class="form-control" />
                        @if (deletedAnalysisTitle == BookAnalysis.AnalysisTitle)
                        {
                            <button class="button-action" style="background-color:red" @onclick="async () => {await DeleteAnalysis(BookAnalysis);}">Delete analysis</button>
                        }
                    }
                    else
                    {
                        <button class="button-action" @onclick="() => {deletingAnalysis = true;}">Delete analysis</button>
                    }
                }
            </ChildContent>
        </ErrorHandlerComponent>
    </div>
</div>

@code {
    [Parameter]
    public string bookAnalysisId { get; set; }

    public BookAnalysisDetailedModel BookAnalysis { get; set; } = new();
    private AppUserModel userToInvite;
    private AppUserModel currentUser = new();
    private MemberType? memberType = null;
    private List<MemberType> memberTypeOptions = new List<MemberType> { MemberType.Moderator, MemberType.Editor, MemberType.Viewer };
    private string searchErrorMessage;
    private bool deletingAnalysis = false;
    private string deletedAnalysisTitle = "";

    private bool DeleteAnalysisNameMatch(ChangeEventArgs e) => (e.Value.ToString() == BookAnalysis.AnalysisTitle) ? true : false;

    private async Task SearchUserByEmail(ChangeEventArgs e)
    {
        string email = e.Value.ToString();
        if (!string.IsNullOrEmpty(email) && Regex.IsMatch(email, @"^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$"))
        {
            searchErrorMessage = string.Empty;
            userToInvite = await appUserClientService.GetUserByEmail(email);
        }
        else
        {
            searchErrorMessage = "Invalid email.";
        }
    }

    private async Task AcceptInvite(int bookAnalysisId)
    {
        await analysisMembershipClientService.AcceptInvite(bookAnalysisId);
    }

    private async Task DeclineInvite(int bookAnalysisId)
    {
        await analysisMembershipClientService.DeclineInvite(bookAnalysisId);
    }

    private async Task InviteUser(int bookAnalysisId)
    {
        if (userToInvite is not null)
        {
            await analysisMembershipClientService.InviteUser(bookAnalysisId, userToInvite.Id);
        }
    }

    private async Task KickUser(int bookAnalysisId, int kickedUserId)
    {
        await analysisMembershipClientService.RemoveUser(bookAnalysisId, kickedUserId);
    }

    private async Task ChangeMemberType(int bookAnalysisId, int memberId)
    {
        if (memberType is not null)
        {
            await analysisMembershipClientService.ChangeMemberStatus(bookAnalysisId, memberId, (MemberType)memberType);
        }
    }

    private async Task ShowEditAnalysisModal(BookAnalysisSummaryModel bookAnalysis)
    {
        var parameters = new ModalParameters().Add(nameof(EditAnalysis.analysisToEdit), bookAnalysis);
        var modal = Modal.Show<EditAnalysis>("Edit Analysis", parameters);
        await modal.Result;
    }

    private async Task DeleteAnalysis(BookAnalysisSummaryModel analysisToDelete)
    {
        await _bookAnalysisClientService.DeleteBookAnalysis(analysisToDelete.Id);
        Navigation.NavigateTo("redirect");
    }

    private bool CurrentUserIsOfMemberType(BookAnalysisSummaryModel bookAnalysis, params MemberType[] memberTypes)
    {
        return bookAnalysis.Members.Any(m => memberTypes.Contains(m.Value) && m.Key.Id == currentUser.Id);
    }

    private async Task LoadAnalysis(BookAnalysisSummaryModel selectedBookAnalysis)
    {
        var userMembershipType = selectedBookAnalysis.Members.FirstOrDefault(m => m.Key.Id == currentUser.Id).Value;
        bool editorialRights = (userMembershipType == MemberType.Administrator
        || userMembershipType == MemberType.Moderator
        || userMembershipType == MemberType.Editor) ? true : false;

        await hubService.LeaveAnalysisEditGroup();
        await appStorage.StoreBookAnalysis(BookAnalysis, editorialRights);

        Navigation.NavigateTo("redirect?reader");
    }

    async Task RegisterHub()
    {
        hubService.hubConnection.On("AnalysisSummaryUpdated", async (BookAnalysisSummaryModel updatedTask) =>
        {
            BookAnalysis.AnalysisTitle = updatedTask.AnalysisTitle;
            StateHasChanged();
        });

        hubService.hubConnection.On("AnalysisMemberAdded", async (int userId) =>
        {
            AppUserModel newUser = new();
            try
            {
                newUser = await appUserClientService.GetUserById(userId);
            }
            catch { }

            if (newUser is not null)
            {
                BookAnalysis.Members.Add(new KeyValuePair<AppUserModel, MemberType>(newUser, MemberType.Invited));
                StateHasChanged();
            }
        });

        hubService.hubConnection.On("AnalysisMemberModified", async (int userId, MemberType memberType) =>
        {
            if (BookAnalysis.Members.Any(m => m.Key.Id == userId))
            {
                var updatedUser = BookAnalysis.Members.FirstOrDefault(m => m.Key.Id == userId);
                BookAnalysis.Members.Remove(updatedUser);
                BookAnalysis.Members.Add(new KeyValuePair<AppUserModel, MemberType>(updatedUser.Key, memberType));
                StateHasChanged();
            }
        });

        hubService.hubConnection.On("AnalysisMemberRemoved", async (int userId) =>
        {
            if (BookAnalysis.Members.Any(m => m.Key.Id == userId))
            {
                var removedUser = BookAnalysis.Members.FirstOrDefault(m => m.Key.Id == userId);
                BookAnalysis.Members.Remove(removedUser);
                StateHasChanged();
            }
        });
    }

    public async Task ReRender()
    {
        StateHasChanged();
    }

    protected async override Task OnInitializedAsync()
    {
        if (!await appStorage.UserIsStored())
        {
            throw new Exception("User is not logged in.");
        }
        currentUser = await appStorage.GetStoredUser();

        var uri = new Uri(Navigation.Uri);
        bookAnalysisId = uri.Query.TrimStart('?');
        if (string.IsNullOrEmpty(bookAnalysisId))
        {
            bookAnalysisId = await appStorage.GetStoredBookAnalysisId();
        }

        if (!int.TryParse(bookAnalysisId, out int _bookAnalysisId))
        {
            throw new Exception("Invalid book analysis Id.");
        }
        
        var storedBookAnalysis = await appStorage.GetStoredBookAnalysis(_bookAnalysisId);
        if(storedBookAnalysis is not null)
        {
            BookAnalysis = storedBookAnalysis;
            await analysisUpdaterService.UpdateAnalysisModel(this);
        }
        else
        {
            BookAnalysis = await _bookAnalysisClientService.GetAnalysisById(_bookAnalysisId);
        }
        

        await RegisterHub();
        await hubService.JoinAnalysisEditGroup(bookAnalysisId);
    }
}
