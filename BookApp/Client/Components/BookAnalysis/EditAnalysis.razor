@inject IBookAnalysisClientService _bookAnalysisClientService

<ErrorHandlerComponent ChildComponentName="Edit analysys">
<ChildContent>
<EditForm Model="@analysisFormModel" OnValidSubmit="@EditAnalysisSubmit" class="form">
    <DataAnnotationsValidator />
    <ValidationSummary class="validation-summary" />

    <div class="form-group">
        <label for="AnalysisTitle">Book Analysis Title</label>
        <InputText @bind-Value="analysisFormModel!.AnalysisTitle" class="form-control" />
    </div>

    @if (awaitingResponse)
    {
        <p>Editing Analysis...</p>
    }
    else
    {
        <button type="submit" class="button-action">Submit</button>
    }
</EditForm>
</ChildContent>
</ErrorHandlerComponent>

<button class="button-action" @onclick="Close">Close</button>

@code {
    [CascadingParameter] 
    BlazoredModalInstance BlazoredModal { get; set; } = default!;

    [Parameter] 
    public BookAnalysisModel analysisToEdit { get; set; }
    public BookAnalysisModel analysisFormModel { get; set; }

    private bool awaitingResponse = false;

    private async Task Close() => await BlazoredModal.CloseAsync();

    public async Task EditAnalysisSubmit()
    {
        awaitingResponse = true;
        try
        {
            await _bookAnalysisClientService.EditBookAnalysis(analysisFormModel);
        }
        finally
        {
            awaitingResponse = false;
        }

        analysisToEdit = new BookAnalysisModel(analysisFormModel);
        await Close();
    }

    protected override void OnInitialized()
    {
        analysisFormModel = new BookAnalysisModel(analysisToEdit);
    }
}
