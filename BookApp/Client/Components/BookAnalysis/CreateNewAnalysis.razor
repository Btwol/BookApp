@inject IBookAnalysisClientService _bookAnalysisClientService

<EditForm style="margin:5px" Model="@newAnalysis" OnValidSubmit="@CreateAnalysis" class="form">
    <DataAnnotationsValidator />
    <ValidationSummary class="validation-summary" />
    <div>
        <div style="display:flex">
            <InputText placeholder="Enter analysis title... " style="width:-webkit-fit-available; margin:1px;" @bind-Value="newAnalysis!.AnalysisTitle" class="form-control" />

            @if (awaitingResponse)
            {
                <p>Creating Analysis...</p>
            }
            else
            {
                <button type="submit" class="button-action">Submit</button>
            }
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public EpubBook book { get; set; }

    [Parameter]
    public string loadedBookHash { get; set; }

    [Parameter]
    public List<BookAnalysisSummaryModel> foundBookAnalyses { get; set; }

    [Parameter]
    public EventCallback<List<BookAnalysisSummaryModel>> foundBookAnalysesChanged { get; set; }

    private bool awaitingResponse = false;
    private BookAnalysisSummaryModel newAnalysis { get; set; } = new();

    private async Task CreateAnalysis()
    {
        awaitingResponse = true;
        try
        {
            newAnalysis.BookHash = loadedBookHash;
            newAnalysis.Authors = book.Authors.ToList();
            newAnalysis.BookTitle = book.Title;

            var newlyCreatedAnalysis = await _bookAnalysisClientService.CreateBookAnalysis(newAnalysis);

            foundBookAnalyses.Insert(0, newlyCreatedAnalysis);
            await foundBookAnalysesChanged.InvokeAsync(foundBookAnalyses);
        }
        finally
        {
            awaitingResponse = false;
        }
    }
}
