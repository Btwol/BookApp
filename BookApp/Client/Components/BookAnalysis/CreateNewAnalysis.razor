@inject IBookAnalysisClientService _bookAnalysisClientService

<EditForm Model="@newAnalysis" OnValidSubmit="@CreateAnalysis" class="form">
    <DataAnnotationsValidator />
    <ValidationSummary class="validation-summary" />

    <div class="form-group">
        <label for="AnalysisTitle">Book Analysis Title</label>
        <InputText @bind-Value="newAnalysis!.AnalysisTitle" class="form-control" />
    </div>

    @if (awaitingResponse)
    {
        <p>Creating Analysis...</p>
    }
    else
    {
        <button type="submit" class="btn btn-primary">Submit</button>
    }
</EditForm> 

@code {
    [Parameter]
    public EpubBook book { get; set; }

    [Parameter]
    public string loadedBookHash { get; set; }

    [Parameter]
    public List<BookAnalysisModel> foundBookAnalyses { get; set; }

    [Parameter]
    public EventCallback<List<BookAnalysisModel>> foundBookAnalysesChanged { get; set; }

    private bool awaitingResponse = false;

    private BookAnalysisModel newAnalysis { get; set; } = new();

    public async Task CreateAnalysis()
    {
        awaitingResponse = true;
        try
        {
            newAnalysis.BookHash = loadedBookHash;
            newAnalysis.Authors = book.Authors.ToList();
            newAnalysis.BookTitle = book.Title;

            var newlyCreatedAnalysis = await _bookAnalysisClientService.CreateBookAnalysis(newAnalysis);

            foundBookAnalyses.Insert(0, newlyCreatedAnalysis);
            await foundBookAnalysesChanged.InvokeAsync(foundBookAnalyses);
        }
        finally
        {
            awaitingResponse = false;
        }
    }
}
