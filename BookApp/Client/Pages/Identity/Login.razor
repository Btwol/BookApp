@page "/login"
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject IAppStorage appStorage
@inject NavigationManager Navigation

<EditForm Model="@loginRequest" OnValidSubmit="@LoginUser" class="form">
    <DataAnnotationsValidator />
    <ValidationSummary class="validation-summary" />

    <div class="form-group">
        <label for="loginUserName">Username</label>
        <InputText @bind-Value="loginRequest!.UserName" class="form-control" />
    </div>
    <div class="form-group">
        <label for="loginPassword">Password</label>
        <InputText @bind-Value="loginRequest!.Password" class="form-control" />
    </div>

    @if(awaitingResponse)
    {
        <p>Logging in...</p>
    }
    else
    {
        <button type="submit" class="btn btn-primary">Submit</button>
    }
</EditForm>

@code {
    public LoginRequest loginRequest { get; set; } = new LoginRequest { UserName = "User3", Password = "@Aa12345" };
    bool loginSuccessful = true;
    string loginRequestResponseMessage = "";
    bool awaitingResponse = false;

    public async Task LoginUser()
    {
        awaitingResponse = true;
        var response = await Http.PostAsJsonAsync<LoginRequest>($"Account/Login", loginRequest);

        if (response.IsSuccessStatusCode)
        {
            var user = await HelperService.HandleResponse<LoginResponse>(response);
            await appStorage.StoreUser(user);
            Navigation.NavigateTo("/redirect");
            await JSRuntime.InvokeVoidAsync("reloadPage");
        }
        else
        {
            loginSuccessful = false;
            var responseMessage = await HelperService.HandleResponse(response);
            loginRequestResponseMessage = responseMessage.Message;
        }

        awaitingResponse = false;
        StateHasChanged();
    }
}
