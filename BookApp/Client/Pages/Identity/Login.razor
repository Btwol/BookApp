@page "/login"
@inject NavigationManager Navigation
@inject IAccountClientService accountService

<div style="width:100%; height:50%; position:absolute; top:30%">
<div class="login-box">
    <h3>Login</h3>
        @if (!loginSuccessful)
        {
            <div class="alert bg-danger text-white alert-dismissible" @onclick="() => loginSuccessful = true">@loginRequestResponseMessage</div>
        }
    <EditForm Model="@loginRequest" OnValidSubmit="@LoginUser" class="form" style="width:90%">
    <DataAnnotationsValidator />
    <ValidationSummary class="validation-summary" />

    <div class="form-group">
        <label for="loginUserName">Username</label>
        <InputText @bind-Value="loginRequest!.UserName" class="form-control" />
    </div>
    <div class="form-group">
        <label for="loginPassword">Password</label>
                <InputText type="password" @bind-Value="loginRequest!.Password" class="form-control" />
    </div>

    @if(awaitingResponse)
    {
        <p>Logging in...</p>
    }
    else
    {
        <button type="submit" class="button-action">Submit</button>
    }
</EditForm>
</div>
</div>
@code {
    public LoginRequest loginRequest { get; set; } = new LoginRequest { UserName = "", Password = "" };
    bool awaitingResponse = false;
    bool loginSuccessful = true;
    string loginRequestResponseMessage = "";

    public async Task LoginUser()
    {
        awaitingResponse = true;
        try
        {
            await accountService.Login(loginRequest);
            Navigation.NavigateTo("/redirect");
        }
        catch (Exception ex)
        {
            loginRequestResponseMessage = ex.Message;
            loginSuccessful = false;
        }
        finally
        {
            StateHasChanged();
            awaitingResponse = false;
        }
    }
}
