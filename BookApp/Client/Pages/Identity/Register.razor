@inject NavigationManager Navigation
@page "/register"
@using BookApp.Client.Services
@using BookApp.Shared.Models.Identity
@inject HttpClient Http
@inject IJSRuntime JSRuntime

@if (!registrationSuccessful)
{
    <div class="alert bg-danger text-white alert-dismissible">@registerRequestResponseMessage</div>
}

<EditForm Model="@newUser" OnValidSubmit="@RegisterUser" class="form">
    <DataAnnotationsValidator />
    <ValidationSummary class="validation-summary" />

    <div class="form-group">
        <label for="email">Email</label>
        <InputText @bind-Value="newUser!.Email" class="form-control" />
    </div>
    <div class="form-group">
        <label for="userName">Username</label>
        <InputText @bind-Value="newUser!.UserName" class="form-control" />
    </div>
    <div class="form-group">
        <label for="password">Password</label>
        <InputText @bind-Value="newUser!.Password" class="form-control" />
    </div>

    @if(awaitingResponse)
    {
        <p>Registering User...</p>
    }
    else
    {
        <button type="submit" class="btn btn-primary">Submit</button>
    }
</EditForm>

@code {
    public RegisterRequest newUser { get; set; } = new RegisterRequest { Email = "a3@a.pl", UserName = "User3", Password = "@Aa12345" };
    bool registrationSuccessful = true;
    string registerRequestResponseMessage = "";
    bool awaitingResponse = false;

    public async Task RegisterUser()
    {
        awaitingResponse = true;
        var response = await Http.PostAsJsonAsync<RegisterRequest>($"Account/Register", newUser);
        var serviceResponse = await HelperService.HandleResponse(response);
        if (response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/login");
        }
        else
        {
            registrationSuccessful = false;
            registerRequestResponseMessage = serviceResponse.Message;
            awaitingResponse = false;
            StateHasChanged();
        }
    }
}
