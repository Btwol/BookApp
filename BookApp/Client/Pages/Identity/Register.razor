@inject NavigationManager Navigation
@page "/register"
@using BookApp.Client.Services
@using BookApp.Shared.Models.Identity
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject IAccountClientService accountService

<div style="width:100%; height:50%; position:absolute; top:30%">
    <div class="login-box">
        <h3>Register</h3>
        @if (!registrationSuccessful)
        {
            <div class="alert bg-danger text-white alert-dismissible" @onclick="() => registrationSuccessful = true">@registerRequestResponseMessage</div>
        }

        <EditForm Model="@newUser" OnValidSubmit="@RegisterUser" class="form" style="width:90%">
            <DataAnnotationsValidator />
            <ValidationSummary class="validation-summary" style="background-color:white" />

            <div class="form-group">
                <label for="email">Email</label>
                <InputText @bind-Value="newUser!.Email" class="form-control" />
            </div>
            <div class="form-group">
                <label for="userName">Username</label>
                <InputText @bind-Value="newUser!.UserName" class="form-control" />
            </div>
            <div class="form-group">
                <label for="password">Password</label>
                <InputText type="password" @bind-Value="newUser!.Password" class="form-control" />
            </div>

            @if (awaitingResponse)
            {
                <p>Registering User...</p>
            }
            else
            {
                <button type="submit" class="button-action">Submit</button>
            }
        </EditForm>
    </div>
</div>
@code {
    private RegisterRequest newUser = new RegisterRequest { Email = "", UserName = "", Password = "" };
    private bool registrationSuccessful = true;
    private string registerRequestResponseMessage = "";
    private bool awaitingResponse = false;

    private async Task RegisterUser()
    {
        awaitingResponse = true;
        try
        {
            await accountService.Register(newUser);
            Navigation.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            registrationSuccessful = false;
            registerRequestResponseMessage = ex.Message;
        }
        finally
        {
            awaitingResponse = false;
            StateHasChanged();
        }
    }
}
